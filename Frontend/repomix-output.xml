This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.bolt/config.json
.gitignore
angular.json
package.json
src/app/components/admin/admin.component.ts
src/app/components/cart/cart.component.ts
src/app/components/favorites/favorites.component.ts
src/app/components/product-detail/product-detail.component.ts
src/app/components/product-list/product-list.component.ts
src/app/models/product.model.ts
src/app/services/product.service.ts
src/global_styles.css
src/index.html
src/main.ts
tsconfig.app.json
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".bolt/config.json">
{
  "template": "angular"
}
</file>

<file path=".gitignore">
.angular
dist
node_modules
</file>

<file path="angular.json">
{
  "$schema": "./node_modules/@angular/cli/lib/config/schema.json",
  "version": 1,
  "cli": {
    "analytics": false
  },
  "newProjectRoot": "projects",
  "projects": {
    "demo": {
      "projectType": "application",
      "root": "",
      "sourceRoot": "src",
      "prefix": "app",
      "architect": {
        "build": {
          "builder": "@angular-devkit/build-angular:browser",
          "options": {
            "outputPath": "dist/demo",
            "index": "src/index.html",
            "main": "src/main.ts",
            "polyfills": ["zone.js"],
            "tsConfig": "tsconfig.app.json",
            "assets": [
              "src/favicon.ico",
              "src/assets"
            ],
            "styles": [
              "src/global_styles.css"
            ],
            "scripts": []
          },
          "configurations": {
            "production": {
              "budgets": [
                {
                  "type": "initial",
                  "maximumWarning": "500kb",
                  "maximumError": "1mb"
                },
                {
                  "type": "anyComponentStyle",
                  "maximumWarning": "2kb",
                  "maximumError": "4kb"
                }
              ],
              "outputHashing": "all"
            },
            "development": {
              "buildOptimizer": false,
              "optimization": false,
              "vendorChunk": true,
              "extractLicenses": false,
              "sourceMap": true,
              "namedChunks": true
            }
          },
          "defaultConfiguration": "production"
        },
        "serve": {
          "builder": "@angular-devkit/build-angular:dev-server",
          "configurations": {
            "production": {
              "browserTarget": "demo:build:production"
            },
            "development": {
              "browserTarget": "demo:build:development"
            }
          },
          "defaultConfiguration": "development"
        }
      }
    }
  }
}
</file>

<file path="package.json">
{
  "name": "art-ecommerce",
  "private": true,
  "scripts": {
    "ng": "ng",
    "start": "ng serve",
    "build": "ng build"
  },
  "dependencies": {
    "@angular/animations": "^17.0.0",
    "@angular/common": "^17.0.0",
    "@angular/compiler": "^17.0.0",
    "@angular/core": "^17.0.0",
    "@angular/forms": "^17.0.0",
    "@angular/platform-browser": "^17.0.0",
    "@angular/platform-browser-dynamic": "^17.0.0",
    "@angular/router": "^17.0.0",
    "@fortawesome/fontawesome-free": "^6.5.1",
    "rxjs": "~7.8.0",
    "tslib": "^2.3.0",
    "zone.js": "~0.14.2",
    "@stripe/stripe-js": "^2.2.0"
  },
  "devDependencies": {
    "@angular-devkit/build-angular": "^17.0.0",
    "@angular/cli": "^17.0.0",
    "@angular/compiler-cli": "^17.0.0",
    "typescript": "~5.2.2"
  }
}
</file>

<file path="src/app/components/admin/admin.component.ts">
import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { ProductService } from '../../services/product.service';
import { Product } from '../../models/product.model';

@Component({
  selector: 'app-admin',
  standalone: true,
  imports: [CommonModule, FormsModule],
  template: `
    <div class="admin-container">
      <h1>Administration</h1>
      
      <div class="admin-content">
        <div class="product-form">
          <h2>{{ editingProduct ? 'Modifier le produit' : 'Ajouter un produit' }}</h2>
          <form (submit)="saveProduct()">
            <div class="form-group">
              <label for="name">Nom du produit</label>
              <input 
                type="text" 
                id="name" 
                [(ngModel)]="newProduct.name" 
                name="name" 
                required
              >
            </div>
            
            <div class="form-group">
              <label for="description">Description</label>
              <textarea 
                id="description" 
                [(ngModel)]="newProduct.description" 
                name="description" 
                required
              ></textarea>
            </div>
            
            <div class="form-group">
              <label for="price">Prix (€)</label>
              <input 
                type="number" 
                id="price" 
                [(ngModel)]="newProduct.price" 
                name="price" 
                step="0.01" 
                required
              >
            </div>
            
            <div class="form-group">
              <label for="imageUrl">URL de l'image</label>
              <input 
                type="url" 
                id="imageUrl" 
                [(ngModel)]="newProduct.imageUrl" 
                name="imageUrl" 
                required
              >
            </div>
            
            <div class="form-group">
              <label for="category">Catégorie</label>
              <select 
                id="category" 
                [(ngModel)]="newProduct.category" 
                name="category" 
                required
              >
                <option value="tools">Outils</option>
                <option value="paintings">Tableaux</option>
              </select>
            </div>
            
            <div class="form-actions">
              <button type="submit" class="save-btn">
                {{ editingProduct ? 'Mettre à jour' : 'Ajouter' }}
              </button>
              @if (editingProduct) {
                <button type="button" class="cancel-btn" (click)="cancelEdit()">
                  Annuler
                </button>
              }
            </div>
          </form>
        </div>
        
        <div class="products-list">
          <h2>Produits existants</h2>
          <div class="products-grid">
            @for (product of products; track product.id) {
              <div class="product-card">
                <img [src]="product.imageUrl" [alt]="product.name">
                <div class="product-info">
                  <h3>{{ product.name }}</h3>
                  <p class="price">{{ product.price | currency:'EUR' }}</p>
                  <p class="category">{{ product.category === 'tools' ? 'Outils' : 'Tableaux' }}</p>
                  <div class="actions">
                    <button class="edit-btn" (click)="editProduct(product)">
                      <i class="fas fa-edit"></i> Modifier
                    </button>
                    <button class="delete-btn" (click)="deleteProduct(product)">
                      <i class="fas fa-trash"></i> Supprimer
                    </button>
                  </div>
                </div>
              </div>
            }
          </div>
        </div>
      </div>
    </div>
  `,
  styles: [`
    .admin-container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 20px;
    }

    h1 {
      font-size: 2rem;
      color: #2c3e50;
      margin-bottom: 30px;
      text-align: center;
    }

    .admin-content {
      display: grid;
      grid-template-columns: 1fr 2fr;
      gap: 30px;
    }

    .product-form {
      background: white;
      padding: 20px;
      border-radius: 10px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }

    h2 {
      color: #2c3e50;
      margin-bottom: 20px;
    }

    .form-group {
      margin-bottom: 20px;
    }

    label {
      display: block;
      margin-bottom: 5px;
      color: #2c3e50;
    }

    input, textarea, select {
      width: 100%;
      padding: 8px;
      border: 1px solid #ddd;
      border-radius: 4px;
      font-family: inherit;
    }

    textarea {
      height: 100px;
      resize: vertical;
    }

    .form-actions {
      display: flex;
      gap: 10px;
    }

    .save-btn, .cancel-btn {
      padding: 10px 20px;
      border-radius: 5px;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    .save-btn {
      background: #27ae60;
      color: white;
      border: none;
    }

    .save-btn:hover {
      background: #219a52;
    }

    .cancel-btn {
      background: #e74c3c;
      color: white;
      border: none;
    }

    .cancel-btn:hover {
      background: #c0392b;
    }

    .products-list {
      background: white;
      padding: 20px;
      border-radius: 10px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }

    .products-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
      gap: 20px;
    }

    .product-card {
      border: 1px solid #eee;
      border-radius: 8px;
      overflow: hidden;
    }

    .product-card img {
      width: 100%;
      height: 150px;
      object-fit: cover;
    }

    .product-info {
      padding: 15px;
    }

    .product-info h3 {
      margin: 0;
      color: #2c3e50;
    }

    .price {
      color: #3498db;
      font-weight: bold;
      margin: 5px 0;
    }

    .category {
      color: #7f8c8d;
      font-size: 0.9rem;
      margin-bottom: 10px;
    }

    .actions {
      display: flex;
      gap: 10px;
    }

    .edit-btn, .delete-btn {
      flex: 1;
      padding: 8px;
      border-radius: 4px;
      cursor: pointer;
      transition: all 0.3s ease;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 5px;
    }

    .edit-btn {
      background: #f1c40f;
      color: #2c3e50;
      border: none;
    }

    .edit-btn:hover {
      background: #f39c12;
    }

    .delete-btn {
      background: #e74c3c;
      color: white;
      border: none;
    }

    .delete-btn:hover {
      background: #c0392b;
    }

    @media (max-width: 768px) {
      .admin-content {
        grid-template-columns: 1fr;
      }
    }
  `]
})
export class AdminComponent implements OnInit {
  products: Product[] = [];
  newProduct: Product = {
    id: 0,
    name: '',
    description: '',
    price: 0,
    imageUrl: '',
    category: 'tools'
  };
  editingProduct: Product | null = null;

  constructor(private productService: ProductService) {}

  ngOnInit() {
    this.productService.getProducts().subscribe(products => {
      this.products = products;
    });
  }

  saveProduct() {
    if (this.editingProduct) {
      this.productService.updateProduct({
        ...this.newProduct,
        id: this.editingProduct.id
      });
    } else {
      this.productService.addProduct(this.newProduct);
    }

    this.resetForm();
  }

  editProduct(product: Product) {
    this.editingProduct = product;
    this.newProduct = { ...product };
  }

  deleteProduct(product: Product) {
    if (confirm('Êtes-vous sûr de vouloir supprimer ce produit ?')) {
      this.productService.deleteProduct(product.id);
    }
  }

  cancelEdit() {
    this.resetForm();
  }

  private resetForm() {
    this.editingProduct = null;
    this.newProduct = {
      id: 0,
      name: '',
      description: '',
      price: 0,
      imageUrl: '',
      category: 'tools'
    };
  }
}
</file>

<file path="src/app/components/cart/cart.component.ts">
import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RouterModule } from '@angular/router';
import { ProductService } from '../../services/product.service';
import { Product } from '../../models/product.model';

@Component({
  selector: 'app-cart',
  standalone: true,
  imports: [CommonModule, RouterModule],
  template: `
    <div class="cart-container">
      <h1>Mon Panier</h1>
      
      @if (cartItems.length > 0) {
        <div class="cart-content">
          <div class="cart-items">
            @for (item of cartItems; track item.id) {
              <div class="cart-item">
                <img [src]="item.imageUrl" [alt]="item.name">
                <div class="item-details">
                  <h3>{{ item.name }}</h3>
                  <p class="price">{{ item.price | currency:'EUR' }}</p>
                </div>
                <button class="remove-btn" (click)="removeFromCart(item)">
                  <i class="fas fa-trash"></i>
                </button>
              </div>
            }
          </div>
          
          <div class="cart-summary">
            <h2>Résumé de la commande</h2>
            <div class="summary-details">
              <div class="summary-row">
                <span>Sous-total</span>
                <span>{{ getSubtotal() | currency:'EUR' }}</span>
              </div>
              <div class="summary-row">
                <span>TVA (20%)</span>
                <span>{{ getTax() | currency:'EUR' }}</span>
              </div>
              <div class="summary-row total">
                <span>Total</span>
                <span>{{ getTotal() | currency:'EUR' }}</span>
              </div>
            </div>
            <button class="checkout-btn" (click)="checkout()">
              <i class="fas fa-lock"></i> Procéder au paiement
            </button>
          </div>
        </div>
      } @else {
        <div class="empty-state">
          <i class="fas fa-shopping-cart"></i>
          <h2>Votre panier est vide</h2>
          <p>Ajoutez des produits à votre panier pour commencer vos achats.</p>
          <a routerLink="/" class="continue-shopping">
            Continuer mes achats
          </a>
        </div>
      }
    </div>
  `,
  styles: [`
    .cart-container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 20px;
    }

    h1 {
      font-size: 2rem;
      color: #2c3e50;
      margin-bottom: 30px;
      text-align: center;
    }

    .cart-content {
      display: grid;
      grid-template-columns: 2fr 1fr;
      gap: 30px;
    }

    .cart-items {
      background: white;
      border-radius: 10px;
      padding: 20px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }

    .cart-item {
      display: flex;
      align-items: center;
      padding: 20px;
      border-bottom: 1px solid #eee;
    }

    .cart-item:last-child {
      border-bottom: none;
    }

    .cart-item img {
      width: 100px;
      height: 100px;
      object-fit: cover;
      border-radius: 5px;
    }

    .item-details {
      flex: 1;
      padding: 0 20px;
    }

    .item-details h3 {
      margin: 0;
      color: #2c3e50;
    }

    .price {
      color: #3498db;
      font-weight: bold;
      margin-top: 5px;
    }

    .remove-btn {
      background: none;
      border: none;
      color: #e74c3c;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    .remove-btn:hover {
      color: #c0392b;
      transform: scale(1.1);
    }

    .cart-summary {
      background: white;
      border-radius: 10px;
      padding: 20px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      height: fit-content;
    }

    .cart-summary h2 {
      color: #2c3e50;
      margin-bottom: 20px;
    }

    .summary-details {
      margin-bottom: 20px;
    }

    .summary-row {
      display: flex;
      justify-content: space-between;
      padding: 10px 0;
      color: #7f8c8d;
    }

    .summary-row.total {
      border-top: 2px solid #eee;
      margin-top: 10px;
      padding-top: 20px;
      font-weight: bold;
      color: #2c3e50;
      font-size: 1.2rem;
    }

    .checkout-btn {
      width: 100%;
      padding: 15px;
      background: #27ae60;
      color: white;
      border: none;
      border-radius: 5px;
      font-size: 1.1rem;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 10px;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    .checkout-btn:hover {
      background: #219a52;
    }

    .empty-state {
      text-align: center;
      padding: 60px 20px;
    }

    .empty-state i {
      font-size: 4rem;
      color: #95a5a6;
      margin-bottom: 20px;
    }

    .empty-state h2 {
      font-size: 1.5rem;
      color: #2c3e50;
      margin-bottom: 10px;
    }

    .empty-state p {
      color: #7f8c8d;
      margin-bottom: 30px;
    }

    .continue-shopping {
      display: inline-block;
      padding: 12px 24px;
      background: #3498db;
      color: white;
      border-radius: 25px;
      text-decoration: none;
      transition: all 0.3s ease;
    }

    .continue-shopping:hover {
      background: #2980b9;
      transform: translateY(-2px);
    }

    @media (max-width: 768px) {
      .cart-content {
        grid-template-columns: 1fr;
      }
    }
  `]
})
export class CartComponent implements OnInit {
  cartItems: Product[] = [];

  constructor(private productService: ProductService) {}

  ngOnInit() {
    this.productService.getCart().subscribe(items => {
      this.cartItems = items;
    });
  }

  removeFromCart(product: Product) {
    this.productService.removeFromCart(product.id);
  }

  getSubtotal(): number {
    return this.cartItems.reduce((total, item) => total + item.price, 0);
  }

  getTax(): number {
    return this.getSubtotal() * 0.2;
  }

  getTotal(): number {
    return this.getSubtotal() + this.getTax();
  }

  async checkout() {
    // Here you would integrate with a payment processor like Stripe
    alert('Redirection vers le système de paiement...');
  }
}
</file>

<file path="src/app/components/favorites/favorites.component.ts">
import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RouterModule } from '@angular/router';
import { ProductService } from '../../services/product.service';
import { Product } from '../../models/product.model';

@Component({
  selector: 'app-favorites',
  standalone: true,
  imports: [CommonModule, RouterModule],
  template: `
    <div class="favorites-container">
      <h1>Mes Favoris</h1>
      
      @if (favorites.length > 0) {
        <div class="favorites-grid">
          @for (product of favorites; track product.id) {
            <div class="favorite-card">
              <div class="image-container">
                <img [src]="product.imageUrl" [alt]="product.name">
                <button 
                  class="remove-btn"
                  (click)="removeFromFavorites(product)">
                  <i class="fas fa-times"></i>
                </button>
              </div>
              <div class="product-info">
                <h3>{{ product.name }}</h3>
                <p class="price">{{ product.price | currency:'EUR' }}</p>
                <div class="actions">
                  <button class="add-to-cart" (click)="addToCart(product)">
                    <i class="fas fa-shopping-cart"></i> Ajouter au panier
                  </button>
                  <a [routerLink]="['/product', product.id]" class="view-details">
                    <i class="fas fa-eye"></i> Voir détails
                  </a>
                </div>
              </div>
            </div>
          }
        </div>
      } @else {
        <div class="empty-state">
          <i class="fas fa-heart-broken"></i>
          <h2>Aucun favori</h2>
          <p>Vous n'avez pas encore ajouté de produits à vos favoris.</p>
          <a routerLink="/" class="browse-products">
            Parcourir les produits
          </a>
        </div>
      }
    </div>
  `,
  styles: [`
    .favorites-container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 20px;
    }

    h1 {
      font-size: 2rem;
      color: #2c3e50;
      margin-bottom: 30px;
      text-align: center;
    }

    .favorites-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
      gap: 30px;
    }

    .favorite-card {
      background: white;
      border-radius: 10px;
      overflow: hidden;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      transition: transform 0.3s ease;
    }

    .favorite-card:hover {
      transform: translateY(-5px);
    }

    .image-container {
      position: relative;
      padding-top: 75%;
    }

    .image-container img {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      object-fit: cover;
    }

    .remove-btn {
      position: absolute;
      top: 10px;
      right: 10px;
      background: rgba(255,255,255,0.9);
      border: none;
      border-radius: 50%;
      width: 30px;
      height: 30px;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    .remove-btn i {
      color: #e74c3c;
    }

    .remove-btn:hover {
      background: #e74c3c;
    }

    .remove-btn:hover i {
      color: white;
    }

    .product-info {
      padding: 20px;
    }

    .product-info h3 {
      margin: 0;
      font-size: 1.2rem;
      color: #2c3e50;
    }

    .price {
      font-size: 1.25rem;
      color: #3498db;
      font-weight: bold;
      margin: 10px 0;
    }

    .actions {
      display: grid;
      grid-template-columns: 1fr;
      gap: 10px;
      margin-top: 15px;
    }

    .add-to-cart, .view-details {
      padding: 10px;
      border-radius: 5px;
      text-align: center;
      transition: all 0.3s ease;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 8px;
    }

    .add-to-cart {
      background: #3498db;
      color: white;
      border: none;
    }

    .add-to-cart:hover {
      background: #2980b9;
    }

    .view-details {
      background: white;
      color: #3498db;
      border: 1px solid #3498db;
      text-decoration: none;
    }

    .view-details:hover {
      background: #f8f9fa;
    }

    .empty-state {
      text-align: center;
      padding: 60px 20px;
    }

    .empty-state i {
      font-size: 4rem;
      color: #95a5a6;
      margin-bottom: 20px;
    }

    .empty-state h2 {
      font-size: 1.5rem;
      color: #2c3e50;
      margin-bottom: 10px;
    }

    .empty-state p {
      color: #7f8c8d;
      margin-bottom: 30px;
    }

    .browse-products {
      display: inline-block;
      padding: 12px 24px;
      background: #3498db;
      color: white;
      border-radius: 25px;
      text-decoration: none;
      transition: all 0.3s ease;
    }

    .browse-products:hover {
      background: #2980b9;
      transform: translateY(-2px);
    }

    @media (max-width: 768px) {
      .favorites-grid {
        grid-template-columns: 1fr;
      }
    }
  `]
})
export class FavoritesComponent implements OnInit {
  favorites: Product[] = [];

  constructor(private productService: ProductService) {}

  ngOnInit() {
    this.productService.getFavorites().subscribe(favorites => {
      this.favorites = favorites;
    });
  }

  removeFromFavorites(product: Product) {
    this.productService.toggleFavorite(product);
  }

  addToCart(product: Product) {
    this.productService.addToCart(product);
  }
}
</file>

<file path="src/app/components/product-detail/product-detail.component.ts">
import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ActivatedRoute, Router } from '@angular/router';
import { ProductService } from '../../services/product.service';
import { Product } from '../../models/product.model';

@Component({
  selector: 'app-product-detail',
  standalone: true,
  imports: [CommonModule],
  template: `
    @if (product) {
      <div class="product-detail">
        <div class="image-section">
          <img [src]="product.imageUrl" [alt]="product.name">
          <button 
            class="favorite-btn"
            (click)="toggleFavorite()"
            [class.active]="isFavorite">
            ❤
          </button>
        </div>
        <div class="info-section">
          <h1>{{ product.name }}</h1>
          <p class="category">{{ product.category === 'tools' ? 'Outils' : 'Tableaux' }}</p>
          <p class="price">{{ product.price | currency:'EUR' }}</p>
          <div class="description">
            <h2>Description</h2>
            <p>{{ product.description }}</p>
          </div>
          <div class="actions">
            <button class="add-to-cart" (click)="addToCart()">
              Ajouter au panier
            </button>
            <button class="buy-now">
              Acheter maintenant
            </button>
          </div>
          @if (isAdmin) {
            <div class="admin-actions">
              <button class="edit" (click)="editProduct()">Modifier</button>
              <button class="delete" (click)="deleteProduct()">Supprimer</button>
            </div>
          }
        </div>
      </div>
    } @else {
      <div class="error">
        <h2>Produit non trouvé</h2>
        <button (click)="goBack()">Retour aux produits</button>
      </div>
    }
  `,
  styles: [`
    .product-detail {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 40px;
      max-width: 1200px;
      margin: 40px auto;
      padding: 0 20px;
    }

    .image-section {
      position: relative;
    }

    .image-section img {
      width: 100%;
      height: auto;
      border-radius: 8px;
      box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    }

    .favorite-btn {
      position: absolute;
      top: 20px;
      right: 20px;
      background: white;
      border: none;
      border-radius: 50%;
      width: 50px;
      height: 50px;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      font-size: 24px;
      color: #ccc;
      transition: all 0.3s ease;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .favorite-btn.active {
      color: #ff4081;
    }

    .info-section {
      padding: 20px;
    }

    h1 {
      font-size: 2.5rem;
      margin: 0 0 10px 0;
      color: #333;
    }

    .category {
      color: #666;
      font-size: 1.1rem;
      text-transform: uppercase;
      letter-spacing: 1px;
      margin-bottom: 20px;
    }

    .price {
      font-size: 2rem;
      color: #007bff;
      font-weight: bold;
      margin-bottom: 30px;
    }

    .description {
      margin-bottom: 40px;
    }

    .description h2 {
      font-size: 1.5rem;
      margin-bottom: 15px;
      color: #333;
    }

    .description p {
      line-height: 1.6;
      color: #666;
    }

    .actions {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 20px;
      margin-bottom: 30px;
    }

    .actions button {
      padding: 15px;
      border-radius: 8px;
      font-size: 1.1rem;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    .add-to-cart {
      background: white;
      color: #007bff;
      border: 2px solid #007bff;
    }

    .add-to-cart:hover {
      background: #f8f9fa;
    }

    .buy-now {
      background: #007bff;
      color: white;
      border: none;
    }

    .buy-now:hover {
      background: #0056b3;
    }

    .admin-actions {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 20px;
      margin-top: 20px;
      padding-top: 20px;
      border-top: 1px solid #eee;
    }

    .admin-actions button {
      padding: 10px;
      border-radius: 4px;
      cursor: pointer;
      font-weight: 500;
    }

    .edit {
      background: #ffd700;
      border: none;
      color: #333;
    }

    .delete {
      background: #dc3545;
      border: none;
      color: white;
    }

    .error {
      text-align: center;
      padding: 40px;
    }

    .error h2 {
      margin-bottom: 20px;
      color: #dc3545;
    }

    @media (max-width: 768px) {
      .product-detail {
        grid-template-columns: 1fr;
      }
    }
  `]
})
export class ProductDetailComponent implements OnInit {
  product: Product | undefined;
  isFavorite = false;
  isAdmin = true; // In a real app, this would come from an auth service

  constructor(
    private route: ActivatedRoute,
    private router: Router,
    private productService: ProductService
  ) {}

  ngOnInit() {
    this.route.params.subscribe(params => {
      this.productService.getProducts().subscribe(products => {
        this.product = products.find(p => p.id === +params['id']);
        if (this.product) {
          this.productService.getFavorites().subscribe(favorites => {
            this.isFavorite = favorites.some(f => f.id === this.product?.id);
          });
        }
      });
    });
  }

  toggleFavorite() {
    if (this.product) {
      this.productService.toggleFavorite(this.product);
      this.isFavorite = !this.isFavorite;
    }
  }

  addToCart() {
    if (this.product) {
      this.productService.addToCart(this.product);
    }
  }

  editProduct() {
    // This would navigate to an edit form in a real application
    console.log('Edit product:', this.product);
  }

  deleteProduct() {
    if (this.product && confirm('Êtes-vous sûr de vouloir supprimer ce produit ?')) {
      this.productService.deleteProduct(this.product.id);
      this.router.navigate(['/']);
    }
  }

  goBack() {
    this.router.navigate(['/']);
  }
}
</file>

<file path="src/app/components/product-list/product-list.component.ts">
import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RouterModule } from '@angular/router';
import { ProductService } from '../../services/product.service';
import { Product } from '../../models/product.model';

@Component({
  selector: 'app-product-list',
  standalone: true,
  imports: [CommonModule, RouterModule],
  template: `
    <div class="container">
      <div class="filters">
        <button 
          [class.active]="currentCategory === 'all'"
          (click)="filterByCategory('all')">
          Tous les produits
        </button>
        <button 
          [class.active]="currentCategory === 'tools'"
          (click)="filterByCategory('tools')">
          Outils
        </button>
        <button 
          [class.active]="currentCategory === 'paintings'"
          (click)="filterByCategory('paintings')">
          Tableaux
        </button>
      </div>

      <div class="products-grid">
        @for (product of filteredProducts; track product.id) {
          <div class="product-card">
            <div class="image-container">
              <img [src]="product.imageUrl" [alt]="product.name">
              <button 
                class="favorite-btn"
                (click)="toggleFavorite(product)"
                [class.active]="isFavorite(product)">
                ❤
              </button>
            </div>
            <div class="product-info">
              <h3>{{ product.name }}</h3>
              <p class="price">{{ product.price | currency:'EUR' }}</p>
              <div class="actions">
                <button class="cart-btn" (click)="addToCart(product)">
                  Ajouter au panier
                </button>
                <a [routerLink]="['/product', product.id]" class="details-btn">
                  Voir détails
                </a>
              </div>
            </div>
          </div>
        }
      </div>
    </div>
  `,
  styles: [`
    .container {
      padding: 20px;
      max-width: 1200px;
      margin: 0 auto;
    }

    .filters {
      margin-bottom: 30px;
      display: flex;
      gap: 15px;
      justify-content: center;
    }

    .filters button {
      padding: 10px 20px;
      border: 2px solid #007bff;
      background: white;
      color: #007bff;
      border-radius: 25px;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    .filters button.active {
      background: #007bff;
      color: white;
    }

    .products-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
      gap: 30px;
    }

    .product-card {
      border: 1px solid #eee;
      border-radius: 8px;
      overflow: hidden;
      transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

    .product-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 5px 15px rgba(0,0,0,0.1);
    }

    .image-container {
      position: relative;
      padding-top: 75%;
    }

    .image-container img {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      object-fit: cover;
    }

    .favorite-btn {
      position: absolute;
      top: 10px;
      right: 10px;
      background: white;
      border: none;
      border-radius: 50%;
      width: 40px;
      height: 40px;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      font-size: 20px;
      color: #ccc;
      transition: all 0.3s ease;
    }

    .favorite-btn.active {
      color: #ff4081;
    }

    .product-info {
      padding: 15px;
    }

    .product-info h3 {
      margin: 0;
      font-size: 1.2rem;
      color: #333;
    }

    .price {
      font-size: 1.25rem;
      color: #007bff;
      font-weight: bold;
      margin: 10px 0;
    }

    .actions {
      display: flex;
      gap: 10px;
      margin-top: 15px;
    }

    .cart-btn, .details-btn {
      flex: 1;
      padding: 8px;
      border-radius: 4px;
      text-align: center;
      transition: all 0.3s ease;
    }

    .cart-btn {
      background: #007bff;
      color: white;
      border: none;
    }

    .cart-btn:hover {
      background: #0056b3;
    }

    .details-btn {
      background: white;
      color: #007bff;
      border: 1px solid #007bff;
      text-decoration: none;
    }

    .details-btn:hover {
      background: #f8f9fa;
    }
  `]
})
export class ProductListComponent implements OnInit {
  products: Product[] = [];
  filteredProducts: Product[] = [];
  favorites: Product[] = [];
  currentCategory: 'all' | 'tools' | 'paintings' = 'all';

  constructor(private productService: ProductService) {}

  ngOnInit() {
    this.productService.getProducts().subscribe(products => {
      this.products = products;
      this.filterByCategory(this.currentCategory);
    });
    
    this.productService.getFavorites().subscribe(favorites => {
      this.favorites = favorites;
    });
  }

  filterByCategory(category: 'all' | 'tools' | 'paintings') {
    this.currentCategory = category;
    if (category === 'all') {
      this.filteredProducts = this.products;
    } else {
      this.filteredProducts = this.products.filter(p => p.category === category);
    }
  }

  toggleFavorite(product: Product) {
    this.productService.toggleFavorite(product);
  }

  isFavorite(product: Product): boolean {
    return this.favorites.some(p => p.id === product.id);
  }

  addToCart(product: Product) {
    this.productService.addToCart(product);
  }
}
</file>

<file path="src/app/models/product.model.ts">
export interface Product {
  id: number;
  name: string;
  description: string;
  price: number;
  imageUrl: string;
  category: 'tools' | 'paintings';
}
</file>

<file path="src/app/services/product.service.ts">
import { Injectable } from '@angular/core';
import { BehaviorSubject, Observable, map } from 'rxjs';
import { Product } from '../models/product.model';

@Injectable({
  providedIn: 'root'
})
export class ProductService {
  private products: Product[] = [
    {
      id: 1,
      name: 'Pinceau Professionnel',
      description: 'Pinceau de haute qualité pour artistes professionnels. Parfait pour l\'acrylique et l\'huile.',
      price: 24.99,
      imageUrl: 'https://images.unsplash.com/photo-1515467837915-15c4777cd75a?w=500',
      category: 'tools'
    },
    {
      id: 2,
      name: 'Set de Peinture Acrylique',
      description: 'Ensemble complet de 24 couleurs acryliques pour artistes.',
      price: 49.99,
      imageUrl: 'https://images.unsplash.com/photo-1513364776144-60967b0f800f?w=500',
      category: 'tools'
    },
    {
      id: 3,
      name: 'Coucher de Soleil',
      description: 'Magnifique peinture à l\'huile représentant un coucher de soleil sur l\'océan.',
      price: 299.99,
      imageUrl: 'https://images.unsplash.com/photo-1544867885-2333f61544ad?w=500',
      category: 'paintings'
    },
    {
      id: 4,
      name: 'Abstrait Moderne',
      description: 'Œuvre d\'art abstraite contemporaine avec des couleurs vives.',
      price: 449.99,
      imageUrl: 'https://images.unsplash.com/photo-1541961017774-22349e4a1262?w=500',
      category: 'paintings'
    }
  ];

  private favorites: Product[] = [];
  private cart: Product[] = [];
  private searchQuery = new BehaviorSubject<string>('');

  private productsSubject = new BehaviorSubject<Product[]>(this.products);
  private favoritesSubject = new BehaviorSubject<Product[]>(this.favorites);
  private cartSubject = new BehaviorSubject<Product[]>(this.cart);

  getProducts(): Observable<Product[]> {
    return this.searchQuery.pipe(
      map(query => {
        if (!query) return this.products;
        const lowercaseQuery = query.toLowerCase();
        return this.products.filter(product =>
          product.name.toLowerCase().includes(lowercaseQuery) ||
          product.description.toLowerCase().includes(lowercaseQuery)
        );
      })
    );
  }

  setSearchQuery(query: string) {
    this.searchQuery.next(query);
  }

  getFavorites(): Observable<Product[]> {
    return this.favoritesSubject.asObservable();
  }

  getCart(): Observable<Product[]> {
    return this.cartSubject.asObservable();
  }

  getProductsByCategory(category: 'tools' | 'paintings'): Observable<Product[]> {
    return this.getProducts().pipe(
      map(products => products.filter(p => p.category === category))
    );
  }

  addProduct(product: Product) {
    const newId = Math.max(...this.products.map(p => p.id)) + 1;
    const newProduct = { ...product, id: newId };
    this.products.push(newProduct);
    this.productsSubject.next([...this.products]);
  }

  updateProduct(product: Product) {
    const index = this.products.findIndex(p => p.id === product.id);
    if (index !== -1) {
      this.products[index] = product;
      this.productsSubject.next([...this.products]);
    }
  }

  deleteProduct(id: number) {
    this.products = this.products.filter(p => p.id !== id);
    this.productsSubject.next([...this.products]);
    this.favorites = this.favorites.filter(p => p.id !== id);
    this.favoritesSubject.next([...this.favorites]);
    this.cart = this.cart.filter(p => p.id !== id);
    this.cartSubject.next([...this.cart]);
  }

  toggleFavorite(product: Product) {
    const index = this.favorites.findIndex(p => p.id === product.id);
    if (index === -1) {
      this.favorites.push(product);
    } else {
      this.favorites.splice(index, 1);
    }
    this.favoritesSubject.next([...this.favorites]);
  }

  addToCart(product: Product) {
    this.cart.push(product);
    this.cartSubject.next([...this.cart]);
  }

  removeFromCart(productId: number) {
    const index = this.cart.findIndex(p => p.id === productId);
    if (index !== -1) {
      this.cart.splice(index, 1);
      this.cartSubject.next([...this.cart]);
    }
  }

  getCartTotal(): number {
    return this.cart.reduce((total, product) => total + product.price, 0);
  }
}
</file>

<file path="src/global_styles.css">
/* Reset CSS */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  line-height: 1.6;
  color: #333;
  background-color: #f8f9fa;
}

button {
  cursor: pointer;
  padding: 8px 16px;
  border: none;
  border-radius: 4px;
  background-color: #007bff;
  color: white;
  transition: all 0.3s ease;
  font-family: inherit;
}

button:hover {
  background-color: #0056b3;
  transform: translateY(-1px);
}

button:active {
  transform: translateY(0);
}

a {
  text-decoration: none;
  color: #007bff;
  transition: color 0.3s ease;
}

a:hover {
  color: #0056b3;
  text-decoration: none;
}

.container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 20px;
}

/* Animations */
@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.fade-in {
  animation: fadeIn 0.3s ease-out;
}

/* Responsive Design */
@media (max-width: 768px) {
  .container {
    padding: 0 15px;
  }
}
</file>

<file path="src/index.html">
<!DOCTYPE html>
<html lang="fr">

<head>
  <meta charset="utf-8">
  <title>Art Shop - Votre boutique d'art en ligne</title>
  <base href="/">

  <!-- Meta tags for SEO and display -->
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="description"
    content="Art Shop - Découvrez notre sélection de produits d'art et fournitures artistiques de qualité">
  <meta name="keywords" content="art, fournitures artistiques, peinture, dessin, artiste">

  <!-- Favicon -->
  <link rel="icon" type="image/x-icon" href="favicon.ico">

  <!-- Font Awesome -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">

  <!-- Google Fonts - You can customize the font choice -->
  <link
    href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&family=Playfair+Display:wght@400;700&display=swap"
    rel="stylesheet">

  <!-- Base styles -->
  <style>
    body {
      margin: 0;
      padding: 0;
      font-family: 'Roboto', sans-serif;
      background-color: #f5f5f5;
    }

    /* Loading spinner styles */
    .app-loading {
      position: fixed;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      height: 100vh;
      width: 100vw;
      background-color: #ffffff;
      z-index: 999;
    }

    .app-loading .spinner {
      width: 40px;
      height: 40px;
      border: 4px solid #f3f3f3;
      border-top: 4px solid #3498db;
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }

    @keyframes spin {
      0% {
        transform: rotate(0deg);
      }

      100% {
        transform: rotate(360deg);
      }
    }
  </style>
</head>

<body>
  <!-- Loading spinner that shows before the app loads -->
  <app-root>
    <div class="app-loading">
      <div class="spinner"></div>
      <p>Chargement de Art Shop...</p>
    </div>
  </app-root>

  <!-- Stripe integration - if you're using Stripe payments -->
  <script src="https://js.stripe.com/v3/"></script>
</body>

</html>
</file>

<file path="src/main.ts">
import { Component } from '@angular/core';
import { bootstrapApplication } from '@angular/platform-browser';
import { provideRouter } from '@angular/router';
import { RouterModule } from '@angular/router';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { ProductListComponent } from './app/components/product-list/product-list.component';
import { ProductDetailComponent } from './app/components/product-detail/product-detail.component';
import { FavoritesComponent } from './app/components/favorites/favorites.component';
import { CartComponent } from './app/components/cart/cart.component';
import { AdminComponent } from './app/components/admin/admin.component';
import { ProductService } from './app/services/product.service';

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [RouterModule, CommonModule, FormsModule],
  template: `
    <header class="main-header">
      <div class="header-content">
        <div class="logo-section">
          <a [routerLink]="['/']" class="logo">
            <i class="fas fa-palette"></i>
            <span>Art Shop</span>
          </a>
        </div>
        
        <div class="search-bar">
          <input 
            type="text" 
            [(ngModel)]="searchQuery" 
            (keyup)="onSearch()"
            placeholder="Rechercher des produits..."
          >
          <i class="fas fa-search"></i>
        </div>

        <nav class="main-nav">
          <a [routerLink]="['/']" 
             [routerLinkActive]="['active']" 
             [routerLinkActiveOptions]="{exact: true}">
            <i class="fas fa-home"></i>
            <span>Accueil</span>
          </a>
          <a [routerLink]="['/favorites']" 
             [routerLinkActive]="['active']" 
             class="favorites-link">
            <i class="fas fa-heart"></i>
            <span>Favoris</span>
            <span *ngIf="favoritesCount > 0" class="badge">{{ favoritesCount }}</span>
          </a>
          <a [routerLink]="['/cart']" 
             [routerLinkActive]="['active']" 
             class="cart-link">
            <i class="fas fa-shopping-cart"></i>
            <span>Panier</span>
            <span *ngIf="cartCount > 0" class="badge">{{ cartCount }}</span>
          </a>
          <a *ngIf="isAdmin" 
             [routerLink]="['/admin']" 
             [routerLinkActive]="['active']">
            <i class="fas fa-cog"></i>
            <span>Admin</span>
          </a>
        </nav>
      </div>
    </header>

    <main>
      <router-outlet></router-outlet>
    </main>

    <footer class="main-footer">
      <div class="footer-content">
        <div class="footer-section">
          <h3>À propos</h3>
          <p>Art Shop est votre destination pour l'art et les fournitures artistiques de qualité.</p>
        </div>
        
        <div class="footer-section">
          <h3>Liens rapides</h3>
          <ul>
            <li><a routerLink="/about">À propos</a></li>
            <li><a routerLink="/contact">Contact</a></li>
            <li><a routerLink="/terms">Conditions d'utilisation</a></li>
            <li><a routerLink="/privacy">Politique de confidentialité</a></li>
          </ul>
        </div>
        
        <div class="footer-section">
          <h3>Contact</h3>
          <p>
            <i class="fas fa-envelope"></i> <span>contact&#64;artshop.com</span><br>
            <i class="fas fa-phone"></i> +33 1 23 45 67 89<br>
            <i class="fas fa-map-marker-alt"></i> Paris, France
          </p>
        </div>
        
        <div class="footer-section">
          <h3>Suivez-nous</h3>
          <div class="social-links">
            <a href="#"><i class="fab fa-facebook"></i></a>
            <a href="#"><i class="fab fa-instagram"></i></a>
            <a href="#"><i class="fab fa-twitter"></i></a>
            <a href="#"><i class="fab fa-pinterest"></i></a>
          </div>
        </div>
      </div>
      
      <div class="footer-bottom">
        <p>&copy; 2024 Art Shop. Tous droits réservés.</p>
      </div>
    </footer>
  `,
  styles: [`
    /* Styles généraux */
    :host {
      display: flex;
      flex-direction: column;
      min-height: 100vh;
    }

    main {
      flex: 1;
      padding: 20px;
      background-color: #f8f9fa;
    }

    /* Styles du Header */
    .main-header {
      background-color: #ffffff;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
      padding: 15px 0;
      position: sticky;
      top: 0;
      z-index: 1000;
    }

    .header-content {
      max-width: 1200px;
      margin: 0 auto;
      padding: 0 20px;
      display: flex;
      align-items: center;
      justify-content: space-between;
      gap: 20px;
    }

    .logo-section {
      flex: 0 0 auto;
    }

    .logo {
      display: flex;
      align-items: center;
      gap: 10px;
      text-decoration: none;
      color: #007bff;
      font-size: 1.5rem;
      font-weight: bold;
    }

    .logo i {
      font-size: 1.8rem;
    }

    /* Barre de recherche */
    .search-bar {
      flex: 1;
      max-width: 500px;
      position: relative;
    }

    .search-bar input {
      width: 100%;
      padding: 10px 40px 10px 15px;
      border: 2px solid #e9ecef;
      border-radius: 25px;
      font-size: 1rem;
      transition: border-color 0.3s ease;
    }

    .search-bar input:focus {
      outline: none;
      border-color: #007bff;
    }

    .search-bar i {
      position: absolute;
      right: 15px;
      top: 50%;
      transform: translateY(-50%);
      color: #6c757d;
    }

    /* Navigation */
    .main-nav {
      display: flex;
      gap: 20px;
      align-items: center;
    }

    .main-nav a {
      display: flex;
      flex-direction: column;
      align-items: center;
      text-decoration: none;
      color: #495057;
      font-size: 0.9rem;
      position: relative;
      padding: 5px 10px;
      transition: color 0.3s ease;
    }

    .main-nav a i {
      font-size: 1.2rem;
      margin-bottom: 4px;
    }

    .main-nav a:hover {
      color: #007bff;
    }

    .main-nav a.active {
      color: #007bff;
    }

    .badge {
      position: absolute;
      top: -8px;
      right: -8px;
      background-color: #dc3545;
      color: white;
      font-size: 0.75rem;
      padding: 2px 6px;
      border-radius: 10px;
      min-width: 18px;
      text-align: center;
    }

    /* Styles du Footer */
    .main-footer {
      background-color: #2c3e50;
      color: #ffffff;
      padding: 40px 0 0;
      margin-top: auto;
    }

    .footer-content {
      max-width: 1200px;
      margin: 0 auto;
      padding: 0 20px;
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 40px;
    }

    .footer-section {
      margin-bottom: 30px;
    }

    .footer-section h3 {
      color: #ffffff;
      font-size: 1.2rem;
      margin-bottom: 20px;
      position: relative;
    }

    .footer-section h3::after {
      content: '';
      position: absolute;
      left: 0;
      bottom: -8px;
      width: 40px;
      height: 2px;
      background-color: #007bff;
    }

    .footer-section p {
      color: #bdc3c7;
      line-height: 1.6;
    }

    .footer-section ul {
      list-style: none;
      padding: 0;
      margin: 0;
    }

    .footer-section ul li {
      margin-bottom: 10px;
    }

    .footer-section ul a {
      color: #bdc3c7;
      text-decoration: none;
      transition: color 0.3s ease;
    }

    .footer-section ul a:hover {
      color: #ffffff;
    }

    .footer-section i {
      width: 20px;
      margin-right: 10px;
    }

    .social-links {
      display: flex;
      gap: 15px;
    }

    .social-links a {
      display: flex;
      align-items: center;
      justify-content: center;
      width: 40px;
      height: 40px;
      background-color: rgba(255,255,255,0.1);
      border-radius: 50%;
      color: #ffffff;
      text-decoration: none;
      transition: all 0.3s ease;
    }

    .social-links a:hover {
      background-color: #007bff;
      transform: translateY(-3px);
    }

    .footer-bottom {
      background-color: #243342;
      padding: 20px 0;
      margin-top: 40px;
      text-align: center;
    }

    .footer-bottom p {
      margin: 0;
      color: #bdc3c7;
      font-size: 0.9rem;
    }

    /* Media Queries pour la responsivité */
    @media (max-width: 768px) {
      .header-content {
        flex-direction: column;
        gap: 15px;
      }

      .search-bar {
        max-width: 100%;
      }

      .main-nav {
        width: 100%;
        justify-content: space-around;
      }

      .footer-content {
        grid-template-columns: 1fr;
      }

      .footer-section {
        text-align: center;
      }

      .footer-section h3::after {
        left: 50%;
        transform: translateX(-50%);
      }

      .social-links {
        justify-content: center;
      }
    }

    @media (max-width: 480px) {
      .main-nav span {
        display: none;
      }

      .main-nav a i {
        font-size: 1.5rem;
        margin-bottom: 0;
      }

      .badge {
        top: -5px;
        right: -5px;
      }
    }
  `]
})
export class App {
  searchQuery = '';
  favoritesCount = 0;
  cartCount = 0;
  isAdmin = true;

  constructor(private productService: ProductService) {
    this.productService.getFavorites().subscribe(favorites => {
      this.favoritesCount = favorites.length;
    });

    this.productService.getCart().subscribe(cart => {
      this.cartCount = cart.length;
    });
  }

  onSearch() {
    this.productService.setSearchQuery(this.searchQuery);
  }
}

const routes = [
  { path: '', component: ProductListComponent },
  { path: 'product/:id', component: ProductDetailComponent },
  { path: 'favorites', component: FavoritesComponent },
  { path: 'cart', component: CartComponent },
  { path: 'admin', component: AdminComponent },
  { path: '**', redirectTo: '' }
];

bootstrapApplication(App, {
  providers: [
    provideRouter(routes)
  ]
}).catch(err => console.error(err));
</file>

<file path="tsconfig.app.json">
/* To learn more about this file see: https://angular.io/config/tsconfig. */
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "outDir": "./out-tsc/app",
    "types": []
  },
  "files": ["src/main.ts"],
  "include": ["src/**/*.d.ts"]
}
</file>

<file path="tsconfig.json">
/* To learn more about this file see: https://angular.io/config/tsconfig. */
{
  "compileOnSave": false,
  "compilerOptions": {
    "outDir": "./dist/out-tsc",
    "forceConsistentCasingInFileNames": true,
    "strict": true,
    "noImplicitOverride": true,
    "noPropertyAccessFromIndexSignature": true,
    "noImplicitReturns": true,
    "noFallthroughCasesInSwitch": true,
    "esModuleInterop": true,
    "sourceMap": true,
    "declaration": false,
    "experimentalDecorators": true,
    "moduleResolution": "node",
    "importHelpers": true,
    "target": "ES2022",
    "module": "ES2022",
    "useDefineForClassFields": false,
    "lib": ["ES2022", "dom"]
  },
  "angularCompilerOptions": {
    "enableI18nLegacyMessageIdFormat": false,
    "strictInjectionParameters": true,
    "strictInputAccessModifiers": true,
    "strictTemplates": true,
    "strictStandalone": true
  }
}
</file>

</files>
