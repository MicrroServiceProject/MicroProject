{"ast":null,"code":"import { BehaviorSubject, throwError } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class NotificationService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:8080/api/notifications';\n    this.notifications = [];\n    this.notificationsSubject = new BehaviorSubject([]);\n    this.notificationCountSubject = new BehaviorSubject(0);\n    this.loadNotifications();\n  }\n  loadNotifications() {\n    this.http.get(this.apiUrl).pipe(tap(notifications => {\n      this.notifications = notifications || [];\n      this.notificationsSubject.next(this.notifications);\n      this.updateNotificationCount();\n    }), catchError(error => {\n      console.error('Erreur lors du chargement des notifications:', error);\n      this.notifications = [];\n      this.notificationsSubject.next(this.notifications);\n      this.updateNotificationCount();\n      return throwError(() => new Error('Impossible de charger les notifications.'));\n    })).subscribe();\n  }\n  getNotifications() {\n    return this.notificationsSubject.asObservable();\n  }\n  getNotificationCount() {\n    return this.notificationCountSubject.asObservable();\n  }\n  addNotification(notification) {\n    return this.http.post(this.apiUrl, notification).pipe(tap(newNotification => {\n      this.notifications.push(newNotification);\n      this.notificationsSubject.next([...this.notifications]);\n      this.updateNotificationCount();\n    }), catchError(error => {\n      console.error('Erreur lors de l\\'ajout de la notification:', error);\n      return throwError(() => new Error('Impossible d\\'ajouter la notification.'));\n    }));\n  }\n  markAsRead(id) {\n    return this.http.put(`${this.apiUrl}/${id}/read`, {}).pipe(tap(() => {\n      const notification = this.notifications.find(n => n.id === id);\n      if (notification) {\n        notification.read = true;\n        this.notificationsSubject.next([...this.notifications]);\n        this.updateNotificationCount();\n      }\n    }), catchError(error => {\n      console.error('Erreur lors de la mise à jour de la notification:', error);\n      return throwError(() => new Error('Impossible de marquer la notification comme lue.'));\n    }));\n  }\n  updateNotificationCount() {\n    const unreadCount = (this.notifications || []).filter(n => !n.read).length;\n    this.notificationCountSubject.next(unreadCount);\n  }\n  static {\n    this.ɵfac = function NotificationService_Factory(t) {\n      return new (t || NotificationService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: NotificationService,\n      factory: NotificationService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","throwError","catchError","tap","NotificationService","constructor","http","apiUrl","notifications","notificationsSubject","notificationCountSubject","loadNotifications","get","pipe","next","updateNotificationCount","error","console","Error","subscribe","getNotifications","asObservable","getNotificationCount","addNotification","notification","post","newNotification","push","markAsRead","id","put","find","n","read","unreadCount","filter","length","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\ghada\\Desktop\\4eme_TWIN\\projet_Microservice\\frontend\\src\\app\\services\\notification.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { BehaviorSubject, Observable, throwError } from 'rxjs';\r\nimport { catchError, tap } from 'rxjs/operators';\r\nimport { Notification } from '../models/notification.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NotificationService {\r\n  private apiUrl = 'http://localhost:8080/api/notifications';\r\n  private notifications: Notification[] = [];\r\n  private notificationsSubject = new BehaviorSubject<Notification[]>([]);\r\n  private notificationCountSubject = new BehaviorSubject<number>(0);\r\n\r\n  constructor(private http: HttpClient) {\r\n    this.loadNotifications();\r\n  }\r\n\r\n  private loadNotifications(): void {\r\n    this.http.get<Notification[]>(this.apiUrl).pipe(\r\n      tap(notifications => {\r\n        this.notifications = notifications || [];\r\n        this.notificationsSubject.next(this.notifications);\r\n        this.updateNotificationCount();\r\n      }),\r\n      catchError(error => {\r\n        console.error('Erreur lors du chargement des notifications:', error);\r\n        this.notifications = [];\r\n        this.notificationsSubject.next(this.notifications);\r\n        this.updateNotificationCount();\r\n        return throwError(() => new Error('Impossible de charger les notifications.'));\r\n      })\r\n    ).subscribe();\r\n  }\r\n\r\n  getNotifications(): Observable<Notification[]> {\r\n    return this.notificationsSubject.asObservable();\r\n  }\r\n\r\n  getNotificationCount(): Observable<number> {\r\n    return this.notificationCountSubject.asObservable();\r\n  }\r\n\r\n  addNotification(notification: Notification): Observable<Notification> {\r\n    return this.http.post<Notification>(this.apiUrl, notification).pipe(\r\n      tap(newNotification => {\r\n        this.notifications.push(newNotification);\r\n        this.notificationsSubject.next([...this.notifications]);\r\n        this.updateNotificationCount();\r\n      }),\r\n      catchError(error => {\r\n        console.error('Erreur lors de l\\'ajout de la notification:', error);\r\n        return throwError(() => new Error('Impossible d\\'ajouter la notification.'));\r\n      })\r\n    );\r\n  }\r\n\r\n  markAsRead(id: string): Observable<void> {\r\n    return this.http.put<void>(`${this.apiUrl}/${id}/read`, {}).pipe(\r\n      tap(() => {\r\n        const notification = this.notifications.find(n => n.id === id);\r\n        if (notification) {\r\n          notification.read = true;\r\n          this.notificationsSubject.next([...this.notifications]);\r\n          this.updateNotificationCount();\r\n        }\r\n      }),\r\n      catchError(error => {\r\n        console.error('Erreur lors de la mise à jour de la notification:', error);\r\n        return throwError(() => new Error('Impossible de marquer la notification comme lue.'));\r\n      })\r\n    );\r\n  }\r\n\r\n  private updateNotificationCount(): void {\r\n    const unreadCount = (this.notifications || []).filter(n => !n.read).length;\r\n    this.notificationCountSubject.next(unreadCount);\r\n  }\r\n}"],"mappings":"AAEA,SAASA,eAAe,EAAcC,UAAU,QAAQ,MAAM;AAC9D,SAASC,UAAU,EAAEC,GAAG,QAAQ,gBAAgB;;;AAMhD,OAAM,MAAOC,mBAAmB;EAM9BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IALhB,KAAAC,MAAM,GAAG,yCAAyC;IAClD,KAAAC,aAAa,GAAmB,EAAE;IAClC,KAAAC,oBAAoB,GAAG,IAAIT,eAAe,CAAiB,EAAE,CAAC;IAC9D,KAAAU,wBAAwB,GAAG,IAAIV,eAAe,CAAS,CAAC,CAAC;IAG/D,IAAI,CAACW,iBAAiB,EAAE;EAC1B;EAEQA,iBAAiBA,CAAA;IACvB,IAAI,CAACL,IAAI,CAACM,GAAG,CAAiB,IAAI,CAACL,MAAM,CAAC,CAACM,IAAI,CAC7CV,GAAG,CAACK,aAAa,IAAG;MAClB,IAAI,CAACA,aAAa,GAAGA,aAAa,IAAI,EAAE;MACxC,IAAI,CAACC,oBAAoB,CAACK,IAAI,CAAC,IAAI,CAACN,aAAa,CAAC;MAClD,IAAI,CAACO,uBAAuB,EAAE;IAChC,CAAC,CAAC,EACFb,UAAU,CAACc,KAAK,IAAG;MACjBC,OAAO,CAACD,KAAK,CAAC,8CAA8C,EAAEA,KAAK,CAAC;MACpE,IAAI,CAACR,aAAa,GAAG,EAAE;MACvB,IAAI,CAACC,oBAAoB,CAACK,IAAI,CAAC,IAAI,CAACN,aAAa,CAAC;MAClD,IAAI,CAACO,uBAAuB,EAAE;MAC9B,OAAOd,UAAU,CAAC,MAAM,IAAIiB,KAAK,CAAC,0CAA0C,CAAC,CAAC;IAChF,CAAC,CAAC,CACH,CAACC,SAAS,EAAE;EACf;EAEAC,gBAAgBA,CAAA;IACd,OAAO,IAAI,CAACX,oBAAoB,CAACY,YAAY,EAAE;EACjD;EAEAC,oBAAoBA,CAAA;IAClB,OAAO,IAAI,CAACZ,wBAAwB,CAACW,YAAY,EAAE;EACrD;EAEAE,eAAeA,CAACC,YAA0B;IACxC,OAAO,IAAI,CAAClB,IAAI,CAACmB,IAAI,CAAe,IAAI,CAAClB,MAAM,EAAEiB,YAAY,CAAC,CAACX,IAAI,CACjEV,GAAG,CAACuB,eAAe,IAAG;MACpB,IAAI,CAAClB,aAAa,CAACmB,IAAI,CAACD,eAAe,CAAC;MACxC,IAAI,CAACjB,oBAAoB,CAACK,IAAI,CAAC,CAAC,GAAG,IAAI,CAACN,aAAa,CAAC,CAAC;MACvD,IAAI,CAACO,uBAAuB,EAAE;IAChC,CAAC,CAAC,EACFb,UAAU,CAACc,KAAK,IAAG;MACjBC,OAAO,CAACD,KAAK,CAAC,6CAA6C,EAAEA,KAAK,CAAC;MACnE,OAAOf,UAAU,CAAC,MAAM,IAAIiB,KAAK,CAAC,wCAAwC,CAAC,CAAC;IAC9E,CAAC,CAAC,CACH;EACH;EAEAU,UAAUA,CAACC,EAAU;IACnB,OAAO,IAAI,CAACvB,IAAI,CAACwB,GAAG,CAAO,GAAG,IAAI,CAACvB,MAAM,IAAIsB,EAAE,OAAO,EAAE,EAAE,CAAC,CAAChB,IAAI,CAC9DV,GAAG,CAAC,MAAK;MACP,MAAMqB,YAAY,GAAG,IAAI,CAAChB,aAAa,CAACuB,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACH,EAAE,KAAKA,EAAE,CAAC;MAC9D,IAAIL,YAAY,EAAE;QAChBA,YAAY,CAACS,IAAI,GAAG,IAAI;QACxB,IAAI,CAACxB,oBAAoB,CAACK,IAAI,CAAC,CAAC,GAAG,IAAI,CAACN,aAAa,CAAC,CAAC;QACvD,IAAI,CAACO,uBAAuB,EAAE;;IAElC,CAAC,CAAC,EACFb,UAAU,CAACc,KAAK,IAAG;MACjBC,OAAO,CAACD,KAAK,CAAC,mDAAmD,EAAEA,KAAK,CAAC;MACzE,OAAOf,UAAU,CAAC,MAAM,IAAIiB,KAAK,CAAC,kDAAkD,CAAC,CAAC;IACxF,CAAC,CAAC,CACH;EACH;EAEQH,uBAAuBA,CAAA;IAC7B,MAAMmB,WAAW,GAAG,CAAC,IAAI,CAAC1B,aAAa,IAAI,EAAE,EAAE2B,MAAM,CAACH,CAAC,IAAI,CAACA,CAAC,CAACC,IAAI,CAAC,CAACG,MAAM;IAC1E,IAAI,CAAC1B,wBAAwB,CAACI,IAAI,CAACoB,WAAW,CAAC;EACjD;;;uBArEW9B,mBAAmB,EAAAiC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAnBpC,mBAAmB;MAAAqC,OAAA,EAAnBrC,mBAAmB,CAAAsC,IAAA;MAAAC,UAAA,EAFlB;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}