{"ast":null,"code":"import { BehaviorSubject, throwError } from 'rxjs';\nimport { catchError, map, switchMap, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./notification.service\";\nexport class PostService {\n  constructor(http, notificationService) {\n    this.http = http;\n    this.notificationService = notificationService;\n    this.apiUrl = 'http://localhost:8080/api';\n    this.userApiUrl = `${this.apiUrl}/users`;\n    this.postsApiUrl = `${this.apiUrl}/posts`;\n    this.posts = [];\n    this.postsSubject = new BehaviorSubject([]);\n    this.favoritesSubject = new BehaviorSubject([]);\n    this.searchQuerySubject = new BehaviorSubject('');\n    this.favoritesCount$ = this.favoritesSubject.asObservable().pipe(map(favorites => favorites.length));\n    this.loadPosts();\n  }\n  loadPosts() {\n    this.http.get(this.postsApiUrl).pipe(tap(posts => {\n      this.posts = posts;\n      this.postsSubject.next(posts);\n      this.updateFavorites();\n    }), catchError(error => {\n      console.error('Erreur lors du chargement des posts:', error);\n      return throwError(() => new Error('Impossible de charger les posts.'));\n    })).subscribe();\n  }\n  getPosts() {\n    return this.postsSubject.asObservable();\n  }\n  getFavorites() {\n    return this.favoritesSubject.asObservable();\n  }\n  getPostById(id) {\n    return this.http.get(`${this.postsApiUrl}/${id}`).pipe(catchError(error => {\n      console.error(`Erreur lors de la récupération du post ${id}:`, error);\n      return throwError(() => new Error('Post non trouvé.'));\n    }));\n  }\n  addPost(post) {\n    console.log('Adding post for user:', post.authorUsername);\n    return this.http.get(`${this.userApiUrl}/username/${encodeURIComponent(post.authorUsername)}`).pipe(switchMap(user => {\n      if (!user || !user.id) {\n        throw new Error('Utilisateur non trouvé pour le nom d\\'utilisateur: ' + post.authorUsername);\n      }\n      post.authorId = user.id;\n      return this.http.post(this.postsApiUrl, post);\n    }), tap(newPost => {\n      this.posts.push(newPost);\n      this.postsSubject.next([...this.posts]);\n      this.updateFavorites();\n      const notification = {\n        id: '',\n        message: `Nouvel article créé : ${newPost.title}`,\n        createdAt: new Date().toISOString(),\n        read: false\n      };\n      this.notificationService.addNotification(notification).subscribe();\n    }), catchError(error => {\n      console.error('Erreur lors de l\\'ajout du post:', error);\n      let errorMessage = 'Erreur serveur.';\n      if (error.status === 404) {\n        errorMessage = `Utilisateur \"${post.authorUsername}\" non trouvé. Veuillez vérifier le nom d'utilisateur.`;\n      } else if (error.message) {\n        errorMessage = error.message;\n      }\n      return throwError(() => new Error(`Impossible d'ajouter le post: ${errorMessage}`));\n    }));\n  }\n  updatePost(id, post) {\n    return this.http.put(`${this.postsApiUrl}/${id}`, post).pipe(tap(updatedPost => {\n      const index = this.posts.findIndex(p => p.id === id);\n      if (index !== -1) {\n        this.posts[index] = updatedPost;\n        this.postsSubject.next([...this.posts]);\n        this.updateFavorites();\n      }\n    }), catchError(error => {\n      console.error('Erreur lors de la mise à jour du post:', error);\n      return throwError(() => new Error('Impossible de mettre à jour le post.'));\n    }));\n  }\n  deletePost(id) {\n    return this.http.delete(`${this.postsApiUrl}/${id}`).pipe(tap(() => {\n      this.posts = this.posts.filter(post => post.id !== id);\n      this.postsSubject.next([...this.posts]);\n      this.updateFavorites();\n    }), catchError(error => {\n      console.error('Erreur lors de la suppression du post:', error);\n      return throwError(() => new Error('Impossible de supprimer le post.'));\n    }));\n  }\n  toggleLike(postId) {\n    this.http.post(`${this.postsApiUrl}/${postId}/like`, {}).pipe(tap(() => {\n      const post = this.posts.find(p => p.id === postId);\n      if (post) {\n        post.isLiked = !post.isLiked;\n        post.likes = post.isLiked ? post.likes + 1 : post.likes - 1;\n        this.postsSubject.next([...this.posts]);\n        this.updateFavorites();\n      }\n    })).subscribe();\n  }\n  toggleFavorite(postId) {\n    this.http.post(`${this.postsApiUrl}/${postId}/favorite`, {}).pipe(tap(() => {\n      const post = this.posts.find(p => p.id === postId);\n      if (post) {\n        post.isFavorite = !post.isFavorite;\n        this.postsSubject.next([...this.posts]);\n        this.updateFavorites();\n      }\n    })).subscribe();\n  }\n  addComment(postId, comment) {\n    console.log('Adding comment for user:', comment.authorUsername);\n    console.log('Requesting user at:', `${this.userApiUrl}/username/${encodeURIComponent(comment.authorUsername)}`);\n    return this.http.get(`${this.userApiUrl}/username/${encodeURIComponent(comment.authorUsername)}`).pipe(switchMap(user => {\n      console.log('User response:', user);\n      if (!user || !user.id) {\n        throw new Error(`Utilisateur \"${comment.authorUsername}\" non trouvé. Veuillez vérifier le nom d'utilisateur.`);\n      }\n      const commentPayload = {\n        content: comment.content,\n        postId: postId,\n        authorId: user.id,\n        authorUsername: comment.authorUsername,\n        createdAt: comment.createdAt || new Date().toISOString()\n      };\n      console.log('Posting comment to:', `${this.apiUrl}/comments`, commentPayload);\n      return this.http.post(`${this.apiUrl}/comments`, commentPayload);\n    }), tap(newComment => {\n      console.log('New comment added:', newComment);\n      const post = this.posts.find(p => p.id === postId);\n      if (post) {\n        if (!post.comments) {\n          post.comments = [];\n        }\n        post.comments.push(newComment);\n        this.postsSubject.next([...this.posts]);\n      }\n      const message = `Nouveau commentaire ajouté sur le post ${postId} par ${comment.authorUsername}`;\n      this.notifyAdminOfComment(postId, message).subscribe();\n    }), catchError(error => {\n      console.error('Erreur lors de l\\'ajout du commentaire:', error);\n      let errorMessage = 'Erreur serveur lors de l\\'ajout du commentaire.';\n      if (error.status === 404) {\n        errorMessage = `Utilisateur \"${comment.authorUsername}\" non trouvé ou endpoint non disponible.`;\n      } else if (error.status === 400) {\n        errorMessage = error.error || 'Requête invalide.';\n      } else if (error.status === 500) {\n        errorMessage = error.error || 'Erreur serveur interne.';\n      } else if (error.message) {\n        errorMessage = error.message;\n      }\n      return throwError(() => new Error(errorMessage));\n    }));\n  }\n  setSearchQuery(query) {\n    this.searchQuerySubject.next(query);\n    if (query.trim() === '') {\n      this.postsSubject.next([...this.posts]);\n    } else {\n      this.http.get(`${this.postsApiUrl}/search?query=${encodeURIComponent(query)}`).pipe(tap(filteredPosts => {\n        this.postsSubject.next(filteredPosts);\n      })).subscribe();\n    }\n  }\n  updateFavorites() {\n    const favorites = this.posts.filter(post => post.isFavorite);\n    this.favoritesSubject.next(favorites);\n  }\n  notifyAdminOfComment(postId, message) {\n    console.log('Notifying admin:', {\n      postId,\n      message\n    });\n    return this.http.post(`${this.apiUrl}/notify-admin`, {\n      postId,\n      message\n    }).pipe(catchError(error => {\n      console.error('Erreur lors de la notification de l\\'admin:', error);\n      return throwError(() => new Error('Impossible de notifier l\\'admin.'));\n    }));\n  }\n  static {\n    this.ɵfac = function PostService_Factory(t) {\n      return new (t || PostService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.NotificationService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: PostService,\n      factory: PostService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","throwError","catchError","map","switchMap","tap","PostService","constructor","http","notificationService","apiUrl","userApiUrl","postsApiUrl","posts","postsSubject","favoritesSubject","searchQuerySubject","favoritesCount$","asObservable","pipe","favorites","length","loadPosts","get","next","updateFavorites","error","console","Error","subscribe","getPosts","getFavorites","getPostById","id","addPost","post","log","authorUsername","encodeURIComponent","user","authorId","newPost","push","notification","message","title","createdAt","Date","toISOString","read","addNotification","errorMessage","status","updatePost","put","updatedPost","index","findIndex","p","deletePost","delete","filter","toggleLike","postId","find","isLiked","likes","toggleFavorite","isFavorite","addComment","comment","commentPayload","content","newComment","comments","notifyAdminOfComment","setSearchQuery","query","trim","filteredPosts","i0","ɵɵinject","i1","HttpClient","i2","NotificationService","factory","ɵfac","providedIn"],"sources":["C:\\Users\\ghada\\Desktop\\4eme_TWIN\\projet_Microservice\\frontend\\src\\app\\services\\post.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable, throwError } from 'rxjs';\nimport { catchError, map, switchMap, tap } from 'rxjs/operators';\nimport { Post } from '../models/post.model';\nimport { BlogComment } from '../models/comment.model';\nimport { NotificationService } from './notification.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PostService {\n  private apiUrl = 'http://localhost:8080/api';\n  private userApiUrl = `${this.apiUrl}/users`;\n  private postsApiUrl = `${this.apiUrl}/posts`;\n  private posts: Post[] = [];\n  private postsSubject = new BehaviorSubject<Post[]>([]);\n  private favoritesSubject = new BehaviorSubject<Post[]>([]);\n  private searchQuerySubject = new BehaviorSubject<string>('');\n  public favoritesCount$ = this.favoritesSubject.asObservable().pipe(\n    map(favorites => favorites.length)\n  );\n\n  constructor(\n    private http: HttpClient,\n    private notificationService: NotificationService\n  ) {\n    this.loadPosts();\n  }\n\n  private loadPosts(): void {\n    this.http.get<Post[]>(this.postsApiUrl).pipe(\n      tap(posts => {\n        this.posts = posts;\n        this.postsSubject.next(posts);\n        this.updateFavorites();\n      }),\n      catchError(error => {\n        console.error('Erreur lors du chargement des posts:', error);\n        return throwError(() => new Error('Impossible de charger les posts.'));\n      })\n    ).subscribe();\n  }\n\n  getPosts(): Observable<Post[]> {\n    return this.postsSubject.asObservable();\n  }\n\n  getFavorites(): Observable<Post[]> {\n    return this.favoritesSubject.asObservable();\n  }\n\n  getPostById(id: string): Observable<Post | undefined> {\n    return this.http.get<Post>(`${this.postsApiUrl}/${id}`).pipe(\n      catchError(error => {\n        console.error(`Erreur lors de la récupération du post ${id}:`, error);\n        return throwError(() => new Error('Post non trouvé.'));\n      })\n    );\n  }\n\n  addPost(post: Post): Observable<Post> {\n    console.log('Adding post for user:', post.authorUsername);\n    return this.http.get<any>(`${this.userApiUrl}/username/${encodeURIComponent(post.authorUsername)}`).pipe(\n      switchMap(user => {\n        if (!user || !user.id) {\n          throw new Error('Utilisateur non trouvé pour le nom d\\'utilisateur: ' + post.authorUsername);\n        }\n        post.authorId = user.id;\n        return this.http.post<Post>(this.postsApiUrl, post);\n      }),\n      tap(newPost => {\n        this.posts.push(newPost);\n        this.postsSubject.next([...this.posts]);\n        this.updateFavorites();\n        const notification = {\n          id: '',\n          message: `Nouvel article créé : ${newPost.title}`,\n          createdAt: new Date().toISOString(),\n          read: false\n        };\n        this.notificationService.addNotification(notification).subscribe();\n      }),\n      catchError(error => {\n        console.error('Erreur lors de l\\'ajout du post:', error);\n        let errorMessage = 'Erreur serveur.';\n        if (error.status === 404) {\n          errorMessage = `Utilisateur \"${post.authorUsername}\" non trouvé. Veuillez vérifier le nom d'utilisateur.`;\n        } else if (error.message) {\n          errorMessage = error.message;\n        }\n        return throwError(() => new Error(`Impossible d'ajouter le post: ${errorMessage}`));\n      })\n    );\n  }\n\n  updatePost(id: string, post: Post): Observable<Post> {\n    return this.http.put<Post>(`${this.postsApiUrl}/${id}`, post).pipe(\n      tap(updatedPost => {\n        const index = this.posts.findIndex(p => p.id === id);\n        if (index !== -1) {\n          this.posts[index] = updatedPost;\n          this.postsSubject.next([...this.posts]);\n          this.updateFavorites();\n        }\n      }),\n      catchError(error => {\n        console.error('Erreur lors de la mise à jour du post:', error);\n        return throwError(() => new Error('Impossible de mettre à jour le post.'));\n      })\n    );\n  }\n\n  deletePost(id: string): Observable<void> {\n    return this.http.delete<void>(`${this.postsApiUrl}/${id}`).pipe(\n      tap(() => {\n        this.posts = this.posts.filter(post => post.id !== id);\n        this.postsSubject.next([...this.posts]);\n        this.updateFavorites();\n      }),\n      catchError(error => {\n        console.error('Erreur lors de la suppression du post:', error);\n        return throwError(() => new Error('Impossible de supprimer le post.'));\n      })\n    );\n  }\n\n  toggleLike(postId: string): void {\n    this.http.post<void>(`${this.postsApiUrl}/${postId}/like`, {}).pipe(\n      tap(() => {\n        const post = this.posts.find(p => p.id === postId);\n        if (post) {\n          post.isLiked = !post.isLiked;\n          post.likes = post.isLiked ? post.likes + 1 : post.likes - 1;\n          this.postsSubject.next([...this.posts]);\n          this.updateFavorites();\n        }\n      })\n    ).subscribe();\n  }\n\n  toggleFavorite(postId: string): void {\n    this.http.post<void>(`${this.postsApiUrl}/${postId}/favorite`, {}).pipe(\n      tap(() => {\n        const post = this.posts.find(p => p.id === postId);\n        if (post) {\n          post.isFavorite = !post.isFavorite;\n          this.postsSubject.next([...this.posts]);\n          this.updateFavorites();\n        }\n      })\n    ).subscribe();\n  }\n\n  addComment(postId: string, comment: BlogComment): Observable<BlogComment> {\n    console.log('Adding comment for user:', comment.authorUsername);\n    console.log('Requesting user at:', `${this.userApiUrl}/username/${encodeURIComponent(comment.authorUsername)}`);\n    return this.http.get<any>(`${this.userApiUrl}/username/${encodeURIComponent(comment.authorUsername)}`).pipe(\n      switchMap(user => {\n        console.log('User response:', user);\n        if (!user || !user.id) {\n          throw new Error(`Utilisateur \"${comment.authorUsername}\" non trouvé. Veuillez vérifier le nom d'utilisateur.`);\n        }\n        const commentPayload = {\n          content: comment.content,\n          postId: postId,\n          authorId: user.id,\n          authorUsername: comment.authorUsername,\n          createdAt: comment.createdAt || new Date().toISOString()\n        };\n        console.log('Posting comment to:', `${this.apiUrl}/comments`, commentPayload);\n        return this.http.post<BlogComment>(`${this.apiUrl}/comments`, commentPayload);\n      }),\n      tap(newComment => {\n        console.log('New comment added:', newComment);\n        const post = this.posts.find(p => p.id === postId);\n        if (post) {\n          if (!post.comments) {\n            post.comments = [];\n          }\n          post.comments.push(newComment);\n          this.postsSubject.next([...this.posts]);\n        }\n        const message = `Nouveau commentaire ajouté sur le post ${postId} par ${comment.authorUsername}`;\n        this.notifyAdminOfComment(postId, message).subscribe();\n      }),\n      catchError(error => {\n        console.error('Erreur lors de l\\'ajout du commentaire:', error);\n        let errorMessage = 'Erreur serveur lors de l\\'ajout du commentaire.';\n        if (error.status === 404) {\n          errorMessage = `Utilisateur \"${comment.authorUsername}\" non trouvé ou endpoint non disponible.`;\n        } else if (error.status === 400) {\n          errorMessage = error.error || 'Requête invalide.';\n        } else if (error.status === 500) {\n          errorMessage = error.error || 'Erreur serveur interne.';\n        } else if (error.message) {\n          errorMessage = error.message;\n        }\n        return throwError(() => new Error(errorMessage));\n      })\n    );\n  }\n\n  setSearchQuery(query: string): void {\n    this.searchQuerySubject.next(query);\n    if (query.trim() === '') {\n      this.postsSubject.next([...this.posts]);\n    } else {\n      this.http.get<Post[]>(`${this.postsApiUrl}/search?query=${encodeURIComponent(query)}`).pipe(\n        tap(filteredPosts => {\n          this.postsSubject.next(filteredPosts);\n        })\n      ).subscribe();\n    }\n  }\n\n  private updateFavorites(): void {\n    const favorites = this.posts.filter(post => post.isFavorite);\n    this.favoritesSubject.next(favorites);\n  }\n\n  notifyAdminOfComment(postId: string, message: string): Observable<void> {\n    console.log('Notifying admin:', { postId, message });\n    return this.http.post<void>(`${this.apiUrl}/notify-admin`, { postId, message }).pipe(\n      catchError(error => {\n        console.error('Erreur lors de la notification de l\\'admin:', error);\n        return throwError(() => new Error('Impossible de notifier l\\'admin.'));\n      })\n    );\n  }\n}"],"mappings":"AAEA,SAASA,eAAe,EAAcC,UAAU,QAAQ,MAAM;AAC9D,SAASC,UAAU,EAAEC,GAAG,EAAEC,SAAS,EAAEC,GAAG,QAAQ,gBAAgB;;;;AAQhE,OAAM,MAAOC,WAAW;EAYtBC,YACUC,IAAgB,EAChBC,mBAAwC;IADxC,KAAAD,IAAI,GAAJA,IAAI;IACJ,KAAAC,mBAAmB,GAAnBA,mBAAmB;IAbrB,KAAAC,MAAM,GAAG,2BAA2B;IACpC,KAAAC,UAAU,GAAG,GAAG,IAAI,CAACD,MAAM,QAAQ;IACnC,KAAAE,WAAW,GAAG,GAAG,IAAI,CAACF,MAAM,QAAQ;IACpC,KAAAG,KAAK,GAAW,EAAE;IAClB,KAAAC,YAAY,GAAG,IAAId,eAAe,CAAS,EAAE,CAAC;IAC9C,KAAAe,gBAAgB,GAAG,IAAIf,eAAe,CAAS,EAAE,CAAC;IAClD,KAAAgB,kBAAkB,GAAG,IAAIhB,eAAe,CAAS,EAAE,CAAC;IACrD,KAAAiB,eAAe,GAAG,IAAI,CAACF,gBAAgB,CAACG,YAAY,EAAE,CAACC,IAAI,CAChEhB,GAAG,CAACiB,SAAS,IAAIA,SAAS,CAACC,MAAM,CAAC,CACnC;IAMC,IAAI,CAACC,SAAS,EAAE;EAClB;EAEQA,SAASA,CAAA;IACf,IAAI,CAACd,IAAI,CAACe,GAAG,CAAS,IAAI,CAACX,WAAW,CAAC,CAACO,IAAI,CAC1Cd,GAAG,CAACQ,KAAK,IAAG;MACV,IAAI,CAACA,KAAK,GAAGA,KAAK;MAClB,IAAI,CAACC,YAAY,CAACU,IAAI,CAACX,KAAK,CAAC;MAC7B,IAAI,CAACY,eAAe,EAAE;IACxB,CAAC,CAAC,EACFvB,UAAU,CAACwB,KAAK,IAAG;MACjBC,OAAO,CAACD,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;MAC5D,OAAOzB,UAAU,CAAC,MAAM,IAAI2B,KAAK,CAAC,kCAAkC,CAAC,CAAC;IACxE,CAAC,CAAC,CACH,CAACC,SAAS,EAAE;EACf;EAEAC,QAAQA,CAAA;IACN,OAAO,IAAI,CAAChB,YAAY,CAACI,YAAY,EAAE;EACzC;EAEAa,YAAYA,CAAA;IACV,OAAO,IAAI,CAAChB,gBAAgB,CAACG,YAAY,EAAE;EAC7C;EAEAc,WAAWA,CAACC,EAAU;IACpB,OAAO,IAAI,CAACzB,IAAI,CAACe,GAAG,CAAO,GAAG,IAAI,CAACX,WAAW,IAAIqB,EAAE,EAAE,CAAC,CAACd,IAAI,CAC1DjB,UAAU,CAACwB,KAAK,IAAG;MACjBC,OAAO,CAACD,KAAK,CAAC,0CAA0CO,EAAE,GAAG,EAAEP,KAAK,CAAC;MACrE,OAAOzB,UAAU,CAAC,MAAM,IAAI2B,KAAK,CAAC,kBAAkB,CAAC,CAAC;IACxD,CAAC,CAAC,CACH;EACH;EAEAM,OAAOA,CAACC,IAAU;IAChBR,OAAO,CAACS,GAAG,CAAC,uBAAuB,EAAED,IAAI,CAACE,cAAc,CAAC;IACzD,OAAO,IAAI,CAAC7B,IAAI,CAACe,GAAG,CAAM,GAAG,IAAI,CAACZ,UAAU,aAAa2B,kBAAkB,CAACH,IAAI,CAACE,cAAc,CAAC,EAAE,CAAC,CAAClB,IAAI,CACtGf,SAAS,CAACmC,IAAI,IAAG;MACf,IAAI,CAACA,IAAI,IAAI,CAACA,IAAI,CAACN,EAAE,EAAE;QACrB,MAAM,IAAIL,KAAK,CAAC,qDAAqD,GAAGO,IAAI,CAACE,cAAc,CAAC;;MAE9FF,IAAI,CAACK,QAAQ,GAAGD,IAAI,CAACN,EAAE;MACvB,OAAO,IAAI,CAACzB,IAAI,CAAC2B,IAAI,CAAO,IAAI,CAACvB,WAAW,EAAEuB,IAAI,CAAC;IACrD,CAAC,CAAC,EACF9B,GAAG,CAACoC,OAAO,IAAG;MACZ,IAAI,CAAC5B,KAAK,CAAC6B,IAAI,CAACD,OAAO,CAAC;MACxB,IAAI,CAAC3B,YAAY,CAACU,IAAI,CAAC,CAAC,GAAG,IAAI,CAACX,KAAK,CAAC,CAAC;MACvC,IAAI,CAACY,eAAe,EAAE;MACtB,MAAMkB,YAAY,GAAG;QACnBV,EAAE,EAAE,EAAE;QACNW,OAAO,EAAE,yBAAyBH,OAAO,CAACI,KAAK,EAAE;QACjDC,SAAS,EAAE,IAAIC,IAAI,EAAE,CAACC,WAAW,EAAE;QACnCC,IAAI,EAAE;OACP;MACD,IAAI,CAACxC,mBAAmB,CAACyC,eAAe,CAACP,YAAY,CAAC,CAACd,SAAS,EAAE;IACpE,CAAC,CAAC,EACF3B,UAAU,CAACwB,KAAK,IAAG;MACjBC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MACxD,IAAIyB,YAAY,GAAG,iBAAiB;MACpC,IAAIzB,KAAK,CAAC0B,MAAM,KAAK,GAAG,EAAE;QACxBD,YAAY,GAAG,gBAAgBhB,IAAI,CAACE,cAAc,uDAAuD;OAC1G,MAAM,IAAIX,KAAK,CAACkB,OAAO,EAAE;QACxBO,YAAY,GAAGzB,KAAK,CAACkB,OAAO;;MAE9B,OAAO3C,UAAU,CAAC,MAAM,IAAI2B,KAAK,CAAC,iCAAiCuB,YAAY,EAAE,CAAC,CAAC;IACrF,CAAC,CAAC,CACH;EACH;EAEAE,UAAUA,CAACpB,EAAU,EAAEE,IAAU;IAC/B,OAAO,IAAI,CAAC3B,IAAI,CAAC8C,GAAG,CAAO,GAAG,IAAI,CAAC1C,WAAW,IAAIqB,EAAE,EAAE,EAAEE,IAAI,CAAC,CAAChB,IAAI,CAChEd,GAAG,CAACkD,WAAW,IAAG;MAChB,MAAMC,KAAK,GAAG,IAAI,CAAC3C,KAAK,CAAC4C,SAAS,CAACC,CAAC,IAAIA,CAAC,CAACzB,EAAE,KAAKA,EAAE,CAAC;MACpD,IAAIuB,KAAK,KAAK,CAAC,CAAC,EAAE;QAChB,IAAI,CAAC3C,KAAK,CAAC2C,KAAK,CAAC,GAAGD,WAAW;QAC/B,IAAI,CAACzC,YAAY,CAACU,IAAI,CAAC,CAAC,GAAG,IAAI,CAACX,KAAK,CAAC,CAAC;QACvC,IAAI,CAACY,eAAe,EAAE;;IAE1B,CAAC,CAAC,EACFvB,UAAU,CAACwB,KAAK,IAAG;MACjBC,OAAO,CAACD,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;MAC9D,OAAOzB,UAAU,CAAC,MAAM,IAAI2B,KAAK,CAAC,sCAAsC,CAAC,CAAC;IAC5E,CAAC,CAAC,CACH;EACH;EAEA+B,UAAUA,CAAC1B,EAAU;IACnB,OAAO,IAAI,CAACzB,IAAI,CAACoD,MAAM,CAAO,GAAG,IAAI,CAAChD,WAAW,IAAIqB,EAAE,EAAE,CAAC,CAACd,IAAI,CAC7Dd,GAAG,CAAC,MAAK;MACP,IAAI,CAACQ,KAAK,GAAG,IAAI,CAACA,KAAK,CAACgD,MAAM,CAAC1B,IAAI,IAAIA,IAAI,CAACF,EAAE,KAAKA,EAAE,CAAC;MACtD,IAAI,CAACnB,YAAY,CAACU,IAAI,CAAC,CAAC,GAAG,IAAI,CAACX,KAAK,CAAC,CAAC;MACvC,IAAI,CAACY,eAAe,EAAE;IACxB,CAAC,CAAC,EACFvB,UAAU,CAACwB,KAAK,IAAG;MACjBC,OAAO,CAACD,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;MAC9D,OAAOzB,UAAU,CAAC,MAAM,IAAI2B,KAAK,CAAC,kCAAkC,CAAC,CAAC;IACxE,CAAC,CAAC,CACH;EACH;EAEAkC,UAAUA,CAACC,MAAc;IACvB,IAAI,CAACvD,IAAI,CAAC2B,IAAI,CAAO,GAAG,IAAI,CAACvB,WAAW,IAAImD,MAAM,OAAO,EAAE,EAAE,CAAC,CAAC5C,IAAI,CACjEd,GAAG,CAAC,MAAK;MACP,MAAM8B,IAAI,GAAG,IAAI,CAACtB,KAAK,CAACmD,IAAI,CAACN,CAAC,IAAIA,CAAC,CAACzB,EAAE,KAAK8B,MAAM,CAAC;MAClD,IAAI5B,IAAI,EAAE;QACRA,IAAI,CAAC8B,OAAO,GAAG,CAAC9B,IAAI,CAAC8B,OAAO;QAC5B9B,IAAI,CAAC+B,KAAK,GAAG/B,IAAI,CAAC8B,OAAO,GAAG9B,IAAI,CAAC+B,KAAK,GAAG,CAAC,GAAG/B,IAAI,CAAC+B,KAAK,GAAG,CAAC;QAC3D,IAAI,CAACpD,YAAY,CAACU,IAAI,CAAC,CAAC,GAAG,IAAI,CAACX,KAAK,CAAC,CAAC;QACvC,IAAI,CAACY,eAAe,EAAE;;IAE1B,CAAC,CAAC,CACH,CAACI,SAAS,EAAE;EACf;EAEAsC,cAAcA,CAACJ,MAAc;IAC3B,IAAI,CAACvD,IAAI,CAAC2B,IAAI,CAAO,GAAG,IAAI,CAACvB,WAAW,IAAImD,MAAM,WAAW,EAAE,EAAE,CAAC,CAAC5C,IAAI,CACrEd,GAAG,CAAC,MAAK;MACP,MAAM8B,IAAI,GAAG,IAAI,CAACtB,KAAK,CAACmD,IAAI,CAACN,CAAC,IAAIA,CAAC,CAACzB,EAAE,KAAK8B,MAAM,CAAC;MAClD,IAAI5B,IAAI,EAAE;QACRA,IAAI,CAACiC,UAAU,GAAG,CAACjC,IAAI,CAACiC,UAAU;QAClC,IAAI,CAACtD,YAAY,CAACU,IAAI,CAAC,CAAC,GAAG,IAAI,CAACX,KAAK,CAAC,CAAC;QACvC,IAAI,CAACY,eAAe,EAAE;;IAE1B,CAAC,CAAC,CACH,CAACI,SAAS,EAAE;EACf;EAEAwC,UAAUA,CAACN,MAAc,EAAEO,OAAoB;IAC7C3C,OAAO,CAACS,GAAG,CAAC,0BAA0B,EAAEkC,OAAO,CAACjC,cAAc,CAAC;IAC/DV,OAAO,CAACS,GAAG,CAAC,qBAAqB,EAAE,GAAG,IAAI,CAACzB,UAAU,aAAa2B,kBAAkB,CAACgC,OAAO,CAACjC,cAAc,CAAC,EAAE,CAAC;IAC/G,OAAO,IAAI,CAAC7B,IAAI,CAACe,GAAG,CAAM,GAAG,IAAI,CAACZ,UAAU,aAAa2B,kBAAkB,CAACgC,OAAO,CAACjC,cAAc,CAAC,EAAE,CAAC,CAAClB,IAAI,CACzGf,SAAS,CAACmC,IAAI,IAAG;MACfZ,OAAO,CAACS,GAAG,CAAC,gBAAgB,EAAEG,IAAI,CAAC;MACnC,IAAI,CAACA,IAAI,IAAI,CAACA,IAAI,CAACN,EAAE,EAAE;QACrB,MAAM,IAAIL,KAAK,CAAC,gBAAgB0C,OAAO,CAACjC,cAAc,uDAAuD,CAAC;;MAEhH,MAAMkC,cAAc,GAAG;QACrBC,OAAO,EAAEF,OAAO,CAACE,OAAO;QACxBT,MAAM,EAAEA,MAAM;QACdvB,QAAQ,EAAED,IAAI,CAACN,EAAE;QACjBI,cAAc,EAAEiC,OAAO,CAACjC,cAAc;QACtCS,SAAS,EAAEwB,OAAO,CAACxB,SAAS,IAAI,IAAIC,IAAI,EAAE,CAACC,WAAW;OACvD;MACDrB,OAAO,CAACS,GAAG,CAAC,qBAAqB,EAAE,GAAG,IAAI,CAAC1B,MAAM,WAAW,EAAE6D,cAAc,CAAC;MAC7E,OAAO,IAAI,CAAC/D,IAAI,CAAC2B,IAAI,CAAc,GAAG,IAAI,CAACzB,MAAM,WAAW,EAAE6D,cAAc,CAAC;IAC/E,CAAC,CAAC,EACFlE,GAAG,CAACoE,UAAU,IAAG;MACf9C,OAAO,CAACS,GAAG,CAAC,oBAAoB,EAAEqC,UAAU,CAAC;MAC7C,MAAMtC,IAAI,GAAG,IAAI,CAACtB,KAAK,CAACmD,IAAI,CAACN,CAAC,IAAIA,CAAC,CAACzB,EAAE,KAAK8B,MAAM,CAAC;MAClD,IAAI5B,IAAI,EAAE;QACR,IAAI,CAACA,IAAI,CAACuC,QAAQ,EAAE;UAClBvC,IAAI,CAACuC,QAAQ,GAAG,EAAE;;QAEpBvC,IAAI,CAACuC,QAAQ,CAAChC,IAAI,CAAC+B,UAAU,CAAC;QAC9B,IAAI,CAAC3D,YAAY,CAACU,IAAI,CAAC,CAAC,GAAG,IAAI,CAACX,KAAK,CAAC,CAAC;;MAEzC,MAAM+B,OAAO,GAAG,0CAA0CmB,MAAM,QAAQO,OAAO,CAACjC,cAAc,EAAE;MAChG,IAAI,CAACsC,oBAAoB,CAACZ,MAAM,EAAEnB,OAAO,CAAC,CAACf,SAAS,EAAE;IACxD,CAAC,CAAC,EACF3B,UAAU,CAACwB,KAAK,IAAG;MACjBC,OAAO,CAACD,KAAK,CAAC,yCAAyC,EAAEA,KAAK,CAAC;MAC/D,IAAIyB,YAAY,GAAG,iDAAiD;MACpE,IAAIzB,KAAK,CAAC0B,MAAM,KAAK,GAAG,EAAE;QACxBD,YAAY,GAAG,gBAAgBmB,OAAO,CAACjC,cAAc,0CAA0C;OAChG,MAAM,IAAIX,KAAK,CAAC0B,MAAM,KAAK,GAAG,EAAE;QAC/BD,YAAY,GAAGzB,KAAK,CAACA,KAAK,IAAI,mBAAmB;OAClD,MAAM,IAAIA,KAAK,CAAC0B,MAAM,KAAK,GAAG,EAAE;QAC/BD,YAAY,GAAGzB,KAAK,CAACA,KAAK,IAAI,yBAAyB;OACxD,MAAM,IAAIA,KAAK,CAACkB,OAAO,EAAE;QACxBO,YAAY,GAAGzB,KAAK,CAACkB,OAAO;;MAE9B,OAAO3C,UAAU,CAAC,MAAM,IAAI2B,KAAK,CAACuB,YAAY,CAAC,CAAC;IAClD,CAAC,CAAC,CACH;EACH;EAEAyB,cAAcA,CAACC,KAAa;IAC1B,IAAI,CAAC7D,kBAAkB,CAACQ,IAAI,CAACqD,KAAK,CAAC;IACnC,IAAIA,KAAK,CAACC,IAAI,EAAE,KAAK,EAAE,EAAE;MACvB,IAAI,CAAChE,YAAY,CAACU,IAAI,CAAC,CAAC,GAAG,IAAI,CAACX,KAAK,CAAC,CAAC;KACxC,MAAM;MACL,IAAI,CAACL,IAAI,CAACe,GAAG,CAAS,GAAG,IAAI,CAACX,WAAW,iBAAiB0B,kBAAkB,CAACuC,KAAK,CAAC,EAAE,CAAC,CAAC1D,IAAI,CACzFd,GAAG,CAAC0E,aAAa,IAAG;QAClB,IAAI,CAACjE,YAAY,CAACU,IAAI,CAACuD,aAAa,CAAC;MACvC,CAAC,CAAC,CACH,CAAClD,SAAS,EAAE;;EAEjB;EAEQJ,eAAeA,CAAA;IACrB,MAAML,SAAS,GAAG,IAAI,CAACP,KAAK,CAACgD,MAAM,CAAC1B,IAAI,IAAIA,IAAI,CAACiC,UAAU,CAAC;IAC5D,IAAI,CAACrD,gBAAgB,CAACS,IAAI,CAACJ,SAAS,CAAC;EACvC;EAEAuD,oBAAoBA,CAACZ,MAAc,EAAEnB,OAAe;IAClDjB,OAAO,CAACS,GAAG,CAAC,kBAAkB,EAAE;MAAE2B,MAAM;MAAEnB;IAAO,CAAE,CAAC;IACpD,OAAO,IAAI,CAACpC,IAAI,CAAC2B,IAAI,CAAO,GAAG,IAAI,CAACzB,MAAM,eAAe,EAAE;MAAEqD,MAAM;MAAEnB;IAAO,CAAE,CAAC,CAACzB,IAAI,CAClFjB,UAAU,CAACwB,KAAK,IAAG;MACjBC,OAAO,CAACD,KAAK,CAAC,6CAA6C,EAAEA,KAAK,CAAC;MACnE,OAAOzB,UAAU,CAAC,MAAM,IAAI2B,KAAK,CAAC,kCAAkC,CAAC,CAAC;IACxE,CAAC,CAAC,CACH;EACH;;;uBA1NWtB,WAAW,EAAA0E,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,mBAAA;IAAA;EAAA;;;aAAX/E,WAAW;MAAAgF,OAAA,EAAXhF,WAAW,CAAAiF,IAAA;MAAAC,UAAA,EAFV;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}