{"ast":null,"code":"import { BehaviorSubject, of, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class NotificationService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:8080/api/notifications'; // Ajuste si nécessaire\n    this.notificationsSubject = new BehaviorSubject([]);\n    this.notifications$ = this.notificationsSubject.asObservable();\n    this.notificationCountSubject = new BehaviorSubject(0);\n    this.notificationCount$ = this.notificationCountSubject.asObservable();\n  }\n  loadNotifications(userId) {\n    this.http.get(`${this.apiUrl}/user/${userId}`).pipe(catchError(error => {\n      console.error(`Erreur lors du chargement des notifications pour l'utilisateur avec ID ${userId}:`, error);\n      this.notificationsSubject.next([]);\n      this.updateNotificationCount();\n      return throwError(() => new Error('Impossible de charger les notifications. Vérifiez que le serveur est en cours d\\'exécution.'));\n    })).subscribe(notifications => {\n      this.notificationsSubject.next(notifications);\n      this.updateNotificationCount();\n    });\n  }\n  loadUnreadNotifications(userId) {\n    this.http.get(`${this.apiUrl}/user/${userId}/unread`).pipe(catchError(error => {\n      console.error(`Erreur lors du chargement des notifications non lues pour l'utilisateur avec ID ${userId}:`, error);\n      this.notificationsSubject.next([]);\n      this.updateNotificationCount();\n      return throwError(() => new Error('Impossible de charger les notifications non lues. Vérifiez que le serveur est en cours d\\'exécution.'));\n    })).subscribe(notifications => {\n      this.notificationsSubject.next(notifications);\n      this.updateNotificationCount();\n    });\n  }\n  markAsRead(notificationId) {\n    this.http.post(`${this.apiUrl}/${notificationId}/read`, {}).pipe(catchError(error => {\n      console.error(`Erreur lors du marquage de la notification avec ID ${notificationId} comme lue:`, error);\n      return of(null);\n    })).subscribe(() => {\n      const notifications = this.notificationsSubject.getValue().map(n => n.id === notificationId ? {\n        ...n,\n        read: true\n      } : n);\n      this.notificationsSubject.next(notifications);\n      this.updateNotificationCount();\n    });\n  }\n  clearNotifications(userId) {\n    this.http.delete(`${this.apiUrl}/user/${userId}`).pipe(catchError(error => {\n      console.error(`Erreur lors de la suppression des notifications pour l'utilisateur avec ID ${userId}:`, error);\n      return of(null);\n    })).subscribe(() => {\n      this.notificationsSubject.next([]);\n      this.updateNotificationCount();\n    });\n  }\n  updateNotificationCount() {\n    const unreadCount = this.notificationsSubject.getValue().filter(n => !n.read).length;\n    this.notificationCountSubject.next(unreadCount);\n  }\n  static {\n    this.ɵfac = function NotificationService_Factory(t) {\n      return new (t || NotificationService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: NotificationService,\n      factory: NotificationService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","of","throwError","catchError","NotificationService","constructor","http","apiUrl","notificationsSubject","notifications$","asObservable","notificationCountSubject","notificationCount$","loadNotifications","userId","get","pipe","error","console","next","updateNotificationCount","Error","subscribe","notifications","loadUnreadNotifications","markAsRead","notificationId","post","getValue","map","n","id","read","clearNotifications","delete","unreadCount","filter","length","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\ghada\\Desktop\\4eme_TWIN\\projet_Microservice\\frontend\\src\\app\\services\\notification.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\r\nimport { BehaviorSubject, Observable, of, throwError } from 'rxjs';\r\nimport { catchError, tap } from 'rxjs/operators';\r\n\r\nexport interface Notification {\r\n  id: string;\r\n  message: string;\r\n  postId: string;\r\n  read: boolean;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NotificationService {\r\n  private apiUrl = 'http://localhost:8080/api/notifications'; // Ajuste si nécessaire\r\n  private notificationsSubject = new BehaviorSubject<Notification[]>([]);\r\n  public notifications$: Observable<Notification[]> = this.notificationsSubject.asObservable();\r\n\r\n  private notificationCountSubject = new BehaviorSubject<number>(0);\r\n  public notificationCount$: Observable<number> = this.notificationCountSubject.asObservable();\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  loadNotifications(userId: string): void {\r\n    this.http.get<Notification[]>(`${this.apiUrl}/user/${userId}`).pipe(\r\n      catchError((error: HttpErrorResponse) => {\r\n        console.error(`Erreur lors du chargement des notifications pour l'utilisateur avec ID ${userId}:`, error);\r\n        this.notificationsSubject.next([]);\r\n        this.updateNotificationCount();\r\n        return throwError(() => new Error('Impossible de charger les notifications. Vérifiez que le serveur est en cours d\\'exécution.'));\r\n      })\r\n    ).subscribe(notifications => {\r\n      this.notificationsSubject.next(notifications);\r\n      this.updateNotificationCount();\r\n    });\r\n  }\r\n\r\n  loadUnreadNotifications(userId: string): void {\r\n    this.http.get<Notification[]>(`${this.apiUrl}/user/${userId}/unread`).pipe(\r\n      catchError((error: HttpErrorResponse) => {\r\n        console.error(`Erreur lors du chargement des notifications non lues pour l'utilisateur avec ID ${userId}:`, error);\r\n        this.notificationsSubject.next([]);\r\n        this.updateNotificationCount();\r\n        return throwError(() => new Error('Impossible de charger les notifications non lues. Vérifiez que le serveur est en cours d\\'exécution.'));\r\n      })\r\n    ).subscribe(notifications => {\r\n      this.notificationsSubject.next(notifications);\r\n      this.updateNotificationCount();\r\n    });\r\n  }\r\n\r\n  markAsRead(notificationId: string): void {\r\n    this.http.post<void>(`${this.apiUrl}/${notificationId}/read`, {}).pipe(\r\n      catchError((error: HttpErrorResponse) => {\r\n        console.error(`Erreur lors du marquage de la notification avec ID ${notificationId} comme lue:`, error);\r\n        return of(null);\r\n      })\r\n    ).subscribe(() => {\r\n      const notifications = this.notificationsSubject.getValue().map(n =>\r\n        n.id === notificationId ? { ...n, read: true } : n\r\n      );\r\n      this.notificationsSubject.next(notifications);\r\n      this.updateNotificationCount();\r\n    });\r\n  }\r\n\r\n  clearNotifications(userId: string): void {\r\n    this.http.delete<void>(`${this.apiUrl}/user/${userId}`).pipe(\r\n      catchError((error: HttpErrorResponse) => {\r\n        console.error(`Erreur lors de la suppression des notifications pour l'utilisateur avec ID ${userId}:`, error);\r\n        return of(null);\r\n      })\r\n    ).subscribe(() => {\r\n      this.notificationsSubject.next([]);\r\n      this.updateNotificationCount();\r\n    });\r\n  }\r\n\r\n  private updateNotificationCount(): void {\r\n    const unreadCount = this.notificationsSubject.getValue().filter(n => !n.read).length;\r\n    this.notificationCountSubject.next(unreadCount);\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}