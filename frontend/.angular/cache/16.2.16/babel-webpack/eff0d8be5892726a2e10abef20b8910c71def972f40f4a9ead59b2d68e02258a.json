{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class NotificationService {\n  constructor() {\n    this.notifications = [];\n    this.notificationsSubject = new BehaviorSubject([]);\n    this.notifications$ = this.notificationsSubject.asObservable();\n    this.notificationCountSubject = new BehaviorSubject(0);\n    this.notificationCount$ = this.notificationCountSubject.asObservable();\n    this.notificationIdCounter = 0; // Persistent counter for unique IDs\n  }\n\n  addNotification(message, postId) {\n    this.notificationIdCounter++; // Increment counter for unique ID\n    const notification = {\n      id: this.notificationIdCounter,\n      message,\n      postId,\n      read: false\n    };\n    this.notifications = [...this.notifications, notification]; // Immutable update\n    this.notificationsSubject.next(this.notifications);\n    this.updateNotificationCount();\n  }\n  getNotificationById(id) {\n    return this.notifications.find(n => n.id === id);\n  }\n  markAsRead(notificationId) {\n    const notification = this.getNotificationById(notificationId);\n    if (!notification) {\n      throw new Error(`Notification with ID ${notificationId} not found`);\n    }\n    this.notifications = this.notifications.map(n => n.id === notificationId ? {\n      ...n,\n      read: true\n    } : n); // Immutable update\n    this.notificationsSubject.next(this.notifications);\n    this.updateNotificationCount();\n  }\n  clearNotifications() {\n    this.notifications = [];\n    this.notificationsSubject.next(this.notifications);\n    this.updateNotificationCount();\n  }\n  updateNotificationCount() {\n    const unreadCount = this.notifications.filter(n => !n.read).length;\n    this.notificationCountSubject.next(unreadCount);\n  }\n  static {\n    this.ɵfac = function NotificationService_Factory(t) {\n      return new (t || NotificationService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: NotificationService,\n      factory: NotificationService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","NotificationService","constructor","notifications","notificationsSubject","notifications$","asObservable","notificationCountSubject","notificationCount$","notificationIdCounter","addNotification","message","postId","notification","id","read","next","updateNotificationCount","getNotificationById","find","n","markAsRead","notificationId","Error","map","clearNotifications","unreadCount","filter","length","factory","ɵfac","providedIn"],"sources":["C:\\Users\\ghada\\Desktop\\4eme_TWIN\\projet_Microservice\\frontend\\src\\app\\services\\notification.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\n\r\nexport interface Notification {\r\n  id: number;\r\n  message: string;\r\n  postId: number;\r\n  read: boolean;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NotificationService {\r\n  private notifications: Notification[] = [];\r\n  private notificationsSubject = new BehaviorSubject<Notification[]>([]);\r\n  public notifications$: Observable<Notification[]> = this.notificationsSubject.asObservable();\r\n\r\n  private notificationCountSubject = new BehaviorSubject<number>(0);\r\n  public notificationCount$: Observable<number> = this.notificationCountSubject.asObservable();\r\n\r\n  private notificationIdCounter = 0; // Persistent counter for unique IDs\r\n\r\n  addNotification(message: string, postId: number): void {\r\n    this.notificationIdCounter++; // Increment counter for unique ID\r\n    const notification: Notification = {\r\n      id: this.notificationIdCounter,\r\n      message,\r\n      postId,\r\n      read: false\r\n    };\r\n    this.notifications = [...this.notifications, notification]; // Immutable update\r\n    this.notificationsSubject.next(this.notifications);\r\n    this.updateNotificationCount();\r\n  }\r\n\r\n  getNotificationById(id: number): Notification | undefined {\r\n    return this.notifications.find(n => n.id === id);\r\n  }\r\n\r\n  markAsRead(notificationId: number): void {\r\n    const notification = this.getNotificationById(notificationId);\r\n    if (!notification) {\r\n      throw new Error(`Notification with ID ${notificationId} not found`);\r\n    }\r\n    this.notifications = this.notifications.map(n =>\r\n      n.id === notificationId ? { ...n, read: true } : n\r\n    ); // Immutable update\r\n    this.notificationsSubject.next(this.notifications);\r\n    this.updateNotificationCount();\r\n  }\r\n\r\n  clearNotifications(): void {\r\n    this.notifications = [];\r\n    this.notificationsSubject.next(this.notifications);\r\n    this.updateNotificationCount();\r\n  }\r\n\r\n  private updateNotificationCount(): void {\r\n    const unreadCount = this.notifications.filter(n => !n.read).length;\r\n    this.notificationCountSubject.next(unreadCount);\r\n  }\r\n}"],"mappings":"AACA,SAASA,eAAe,QAAoB,MAAM;;AAYlD,OAAM,MAAOC,mBAAmB;EAHhCC,YAAA;IAIU,KAAAC,aAAa,GAAmB,EAAE;IAClC,KAAAC,oBAAoB,GAAG,IAAIJ,eAAe,CAAiB,EAAE,CAAC;IAC/D,KAAAK,cAAc,GAA+B,IAAI,CAACD,oBAAoB,CAACE,YAAY,EAAE;IAEpF,KAAAC,wBAAwB,GAAG,IAAIP,eAAe,CAAS,CAAC,CAAC;IAC1D,KAAAQ,kBAAkB,GAAuB,IAAI,CAACD,wBAAwB,CAACD,YAAY,EAAE;IAEpF,KAAAG,qBAAqB,GAAG,CAAC,CAAC,CAAC;;;EAEnCC,eAAeA,CAACC,OAAe,EAAEC,MAAc;IAC7C,IAAI,CAACH,qBAAqB,EAAE,CAAC,CAAC;IAC9B,MAAMI,YAAY,GAAiB;MACjCC,EAAE,EAAE,IAAI,CAACL,qBAAqB;MAC9BE,OAAO;MACPC,MAAM;MACNG,IAAI,EAAE;KACP;IACD,IAAI,CAACZ,aAAa,GAAG,CAAC,GAAG,IAAI,CAACA,aAAa,EAAEU,YAAY,CAAC,CAAC,CAAC;IAC5D,IAAI,CAACT,oBAAoB,CAACY,IAAI,CAAC,IAAI,CAACb,aAAa,CAAC;IAClD,IAAI,CAACc,uBAAuB,EAAE;EAChC;EAEAC,mBAAmBA,CAACJ,EAAU;IAC5B,OAAO,IAAI,CAACX,aAAa,CAACgB,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACN,EAAE,KAAKA,EAAE,CAAC;EAClD;EAEAO,UAAUA,CAACC,cAAsB;IAC/B,MAAMT,YAAY,GAAG,IAAI,CAACK,mBAAmB,CAACI,cAAc,CAAC;IAC7D,IAAI,CAACT,YAAY,EAAE;MACjB,MAAM,IAAIU,KAAK,CAAC,wBAAwBD,cAAc,YAAY,CAAC;;IAErE,IAAI,CAACnB,aAAa,GAAG,IAAI,CAACA,aAAa,CAACqB,GAAG,CAACJ,CAAC,IAC3CA,CAAC,CAACN,EAAE,KAAKQ,cAAc,GAAG;MAAE,GAAGF,CAAC;MAAEL,IAAI,EAAE;IAAI,CAAE,GAAGK,CAAC,CACnD,CAAC,CAAC;IACH,IAAI,CAAChB,oBAAoB,CAACY,IAAI,CAAC,IAAI,CAACb,aAAa,CAAC;IAClD,IAAI,CAACc,uBAAuB,EAAE;EAChC;EAEAQ,kBAAkBA,CAAA;IAChB,IAAI,CAACtB,aAAa,GAAG,EAAE;IACvB,IAAI,CAACC,oBAAoB,CAACY,IAAI,CAAC,IAAI,CAACb,aAAa,CAAC;IAClD,IAAI,CAACc,uBAAuB,EAAE;EAChC;EAEQA,uBAAuBA,CAAA;IAC7B,MAAMS,WAAW,GAAG,IAAI,CAACvB,aAAa,CAACwB,MAAM,CAACP,CAAC,IAAI,CAACA,CAAC,CAACL,IAAI,CAAC,CAACa,MAAM;IAClE,IAAI,CAACrB,wBAAwB,CAACS,IAAI,CAACU,WAAW,CAAC;EACjD;;;uBAhDWzB,mBAAmB;IAAA;EAAA;;;aAAnBA,mBAAmB;MAAA4B,OAAA,EAAnB5B,mBAAmB,CAAA6B,IAAA;MAAAC,UAAA,EAFlB;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}