{"ast":null,"code":"import { BehaviorSubject, map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class PostService {\n  constructor() {\n    this.posts = [{\n      id: 1,\n      title: 'Les secrets de la peinture impressionniste',\n      content: 'L’impressionnisme est un mouvement artistique qui a révolutionné la peinture au 19e siècle...',\n      imageUrl: 'https://images.unsplash.com/photo-1579783902614-a3fb3927b6a5',\n      author: 'Marie Dupont',\n      createdAt: '2025-04-01T10:00:00',\n      category: 'Peinture',\n      likes: 15,\n      isLiked: false,\n      isFavorite: false,\n      comments: [{\n        id: 1,\n        content: 'Article très inspirant !',\n        author: 'Jean Martin',\n        createdAt: '2025-04-01T10:05:00'\n      }]\n    }, {\n      id: 2,\n      title: 'Sculpture moderne : une nouvelle ère',\n      content: 'La sculpture moderne a redéfini les limites de l’art tridimensionnel...',\n      imageUrl: 'https://images.unsplash.com/photo-1509042239860-d62e4d46d7a4',\n      author: 'Lucie Bernard',\n      createdAt: '2025-04-02T15:30:00',\n      category: 'Sculpture',\n      likes: 8,\n      isLiked: false,\n      isFavorite: false,\n      comments: []\n    }];\n    this.searchQuery = new BehaviorSubject('');\n    this.postsSubject = new BehaviorSubject(this.posts);\n    this.favoritesCount$ = new BehaviorSubject(this.getFavoritesCount());\n    // Add a BehaviorSubject for new post notifications\n    this.newPostNotificationSubject = new BehaviorSubject(null);\n    this.newPostNotification$ = this.newPostNotificationSubject.asObservable();\n  }\n  getPosts() {\n    return this.searchQuery.pipe(map(query => {\n      if (!query) return this.posts;\n      const lowercaseQuery = query.toLowerCase();\n      return this.posts.filter(post => post.title.toLowerCase().includes(lowercaseQuery) || post.content.toLowerCase().includes(lowercaseQuery) || post.category.toLowerCase().includes(lowercaseQuery));\n    }));\n  }\n  setSearchQuery(query) {\n    this.searchQuery.next(query);\n  }\n  getPostById(id) {\n    return this.getPosts().pipe(map(posts => posts.find(p => p.id === id)));\n  }\n  addPost(post) {\n    const newId = Math.max(...this.posts.map(p => p.id)) + 1;\n    const newPost = {\n      ...post,\n      id: newId,\n      comments: [],\n      createdAt: new Date().toISOString(),\n      likes: 0,\n      isLiked: false,\n      isFavorite: false\n    };\n    this.posts.push(newPost);\n    this.postsSubject.next([...this.posts]);\n    // Emit a notification when a new post is added\n    this.newPostNotificationSubject.next(`Nouveau post publié : ${newPost.title}`);\n  }\n  updatePost(id, updatedPost) {\n    const index = this.posts.findIndex(p => p.id === id);\n    if (index !== -1) {\n      this.posts[index] = {\n        ...updatedPost,\n        id,\n        comments: this.posts[index].comments,\n        likes: this.posts[index].likes,\n        isLiked: this.posts[index].isLiked,\n        isFavorite: this.posts[index].isFavorite\n      };\n      this.postsSubject.next([...this.posts]);\n      this.favoritesCount$.next(this.getFavoritesCount());\n    }\n  }\n  deletePost(id) {\n    this.posts = this.posts.filter(p => p.id !== id);\n    this.postsSubject.next([...this.posts]);\n    this.favoritesCount$.next(this.getFavoritesCount());\n  }\n  toggleLike(postId) {\n    const post = this.posts.find(p => p.id === postId);\n    if (post) {\n      post.isLiked = !post.isLiked;\n      post.likes += post.isLiked ? 1 : -1;\n      this.postsSubject.next([...this.posts]);\n    }\n  }\n  toggleFavorite(postId) {\n    const post = this.posts.find(p => p.id === postId);\n    if (post) {\n      post.isFavorite = !post.isFavorite;\n      this.postsSubject.next([...this.posts]);\n      this.favoritesCount$.next(this.getFavoritesCount());\n    }\n  }\n  getFavorites() {\n    return this.getPosts().pipe(map(posts => posts.filter(p => p.isFavorite)));\n  }\n  getFavoritesCount() {\n    return this.posts.filter(p => p.isFavorite).length;\n  }\n  addComment(postId, comment) {\n    const post = this.posts.find(p => p.id === postId);\n    if (post) {\n      const newCommentId = post.comments.length > 0 ? Math.max(...post.comments.map(c => c.id)) + 1 : 1;\n      const newComment = {\n        id: newCommentId,\n        content: comment.content,\n        author: comment.author,\n        createdAt: new Date().toISOString()\n      };\n      post.comments.push(newComment);\n      this.postsSubject.next([...this.posts]);\n    }\n  }\n  // Method to clear the notification\n  clearNotification() {\n    this.newPostNotificationSubject.next(null);\n  }\n  static {\n    this.ɵfac = function PostService_Factory(t) {\n      return new (t || PostService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: PostService,\n      factory: PostService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","map","PostService","constructor","posts","id","title","content","imageUrl","author","createdAt","category","likes","isLiked","isFavorite","comments","searchQuery","postsSubject","favoritesCount$","getFavoritesCount","newPostNotificationSubject","newPostNotification$","asObservable","getPosts","pipe","query","lowercaseQuery","toLowerCase","filter","post","includes","setSearchQuery","next","getPostById","find","p","addPost","newId","Math","max","newPost","Date","toISOString","push","updatePost","updatedPost","index","findIndex","deletePost","toggleLike","postId","toggleFavorite","getFavorites","length","addComment","comment","newCommentId","c","newComment","clearNotification","factory","ɵfac","providedIn"],"sources":["C:\\Users\\ghada\\Desktop\\4eme_TWIN\\projet_Microservice\\frontend\\src\\app\\services\\post.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, map } from 'rxjs';\nimport { Post } from '../models/post.model';\nimport { BlogComment } from '../models/comment.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PostService {\n  private posts: Post[] = [\n    {\n      id: 1,\n      title: 'Les secrets de la peinture impressionniste',\n      content: 'L’impressionnisme est un mouvement artistique qui a révolutionné la peinture au 19e siècle...',\n      imageUrl: 'https://images.unsplash.com/photo-1579783902614-a3fb3927b6a5',\n      author: 'Marie Dupont',\n      createdAt: '2025-04-01T10:00:00',\n      category: 'Peinture',\n      likes: 15,\n      isLiked: false,\n      isFavorite: false,\n      comments: [\n        { id: 1, content: 'Article très inspirant !', author: 'Jean Martin', createdAt: '2025-04-01T10:05:00' }\n      ]\n    },\n    {\n      id: 2,\n      title: 'Sculpture moderne : une nouvelle ère',\n      content: 'La sculpture moderne a redéfini les limites de l’art tridimensionnel...',\n      imageUrl: 'https://images.unsplash.com/photo-1509042239860-d62e4d46d7a4',\n      author: 'Lucie Bernard',\n      createdAt: '2025-04-02T15:30:00',\n      category: 'Sculpture',\n      likes: 8,\n      isLiked: false,\n      isFavorite: false,\n      comments: []\n    }\n  ];\n\n  private searchQuery = new BehaviorSubject<string>('');\n  private postsSubject = new BehaviorSubject<Post[]>(this.posts);\n  public favoritesCount$ = new BehaviorSubject<number>(this.getFavoritesCount());\n  // Add a BehaviorSubject for new post notifications\n  private newPostNotificationSubject = new BehaviorSubject<string | null>(null);\n  public newPostNotification$ = this.newPostNotificationSubject.asObservable();\n\n  getPosts(): Observable<Post[]> {\n    return this.searchQuery.pipe(\n      map(query => {\n        if (!query) return this.posts;\n        const lowercaseQuery = query.toLowerCase();\n        return this.posts.filter(post =>\n          post.title.toLowerCase().includes(lowercaseQuery) ||\n          post.content.toLowerCase().includes(lowercaseQuery) ||\n          post.category.toLowerCase().includes(lowercaseQuery)\n        );\n      })\n    );\n  }\n\n  setSearchQuery(query: string) {\n    this.searchQuery.next(query);\n  }\n\n  getPostById(id: number): Observable<Post | undefined> {\n    return this.getPosts().pipe(\n      map(posts => posts.find(p => p.id === id))\n    );\n  }\n\n  addPost(post: Post) {\n    const newId = Math.max(...this.posts.map(p => p.id)) + 1;\n    const newPost: Post = { ...post, id: newId, comments: [], createdAt: new Date().toISOString(), likes: 0, isLiked: false, isFavorite: false };\n    this.posts.push(newPost);\n    this.postsSubject.next([...this.posts]);\n    // Emit a notification when a new post is added\n    this.newPostNotificationSubject.next(`Nouveau post publié : ${newPost.title}`);\n  }\n\n  updatePost(id: number, updatedPost: Post) {\n    const index = this.posts.findIndex(p => p.id === id);\n    if (index !== -1) {\n      this.posts[index] = { ...updatedPost, id, comments: this.posts[index].comments, likes: this.posts[index].likes, isLiked: this.posts[index].isLiked, isFavorite: this.posts[index].isFavorite };\n      this.postsSubject.next([...this.posts]);\n      this.favoritesCount$.next(this.getFavoritesCount());\n    }\n  }\n\n  deletePost(id: number) {\n    this.posts = this.posts.filter(p => p.id !== id);\n    this.postsSubject.next([...this.posts]);\n    this.favoritesCount$.next(this.getFavoritesCount());\n  }\n\n  toggleLike(postId: number) {\n    const post = this.posts.find(p => p.id === postId);\n    if (post) {\n      post.isLiked = !post.isLiked;\n      post.likes += post.isLiked ? 1 : -1;\n      this.postsSubject.next([...this.posts]);\n    }\n  }\n\n  toggleFavorite(postId: number) {\n    const post = this.posts.find(p => p.id === postId);\n    if (post) {\n      post.isFavorite = !post.isFavorite;\n      this.postsSubject.next([...this.posts]);\n      this.favoritesCount$.next(this.getFavoritesCount());\n    }\n  }\n\n  getFavorites(): Observable<Post[]> {\n    return this.getPosts().pipe(\n      map(posts => posts.filter(p => p.isFavorite))\n    );\n  }\n\n  private getFavoritesCount(): number {\n    return this.posts.filter(p => p.isFavorite).length;\n  }\n\n  addComment(postId: number, comment: BlogComment) {\n    const post = this.posts.find(p => p.id === postId);\n    if (post) {\n      const newCommentId = post.comments.length > 0 \n        ? Math.max(...post.comments.map(c => c.id)) + 1 \n        : 1;\n      const newComment: BlogComment = {\n        id: newCommentId,\n        content: comment.content,\n        author: comment.author,\n        createdAt: new Date().toISOString()\n      };\n      post.comments.push(newComment);\n      this.postsSubject.next([...this.posts]);\n    }\n  }\n\n  // Method to clear the notification\n  clearNotification() {\n    this.newPostNotificationSubject.next(null);\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}