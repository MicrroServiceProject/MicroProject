{"ast":null,"code":"import { BehaviorSubject, map, of } from 'rxjs';\nimport { tap } from 'rxjs/operators'; // Import tap\nimport * as i0 from \"@angular/core\";\nexport class PostService {\n  constructor() {\n    this.posts = [{\n      id: 1,\n      title: 'Les secrets de la peinture impressionniste',\n      content: 'L’impressionnisme est un mouvement artistique qui a révolutionné la peinture au 19e siècle...',\n      imageUrl: 'https://images.unsplash.com/photo-1579783902614-a3fb3927b6a5',\n      author: 'Marie Dupont',\n      createdAt: '2025-04-01T10:00:00',\n      category: 'Peinture',\n      likes: 15,\n      isLiked: false,\n      isFavorite: false,\n      comments: [{\n        id: 1,\n        content: 'Article très inspirant !',\n        author: 'Jean Martin',\n        createdAt: '2025-04-01T10:05:00'\n      }]\n    }, {\n      id: 2,\n      title: 'Sculpture moderne : une nouvelle ère',\n      content: 'La sculpture moderne a redéfini les limites de l’art tridimensionnel...',\n      imageUrl: 'https://images.unsplash.com/photo-1509042239860-d62e4d46d7a4',\n      author: 'Lucie Bernard',\n      createdAt: '2025-04-02T15:30:00',\n      category: 'Sculpture',\n      likes: 8,\n      isLiked: false,\n      isFavorite: false,\n      comments: []\n    }];\n    this.searchQuery = new BehaviorSubject('');\n    this.postsSubject = new BehaviorSubject(this.posts);\n    this.favoritesCount$ = new BehaviorSubject(this.getFavoritesCount());\n  }\n  getPosts() {\n    return this.searchQuery.pipe(map(query => {\n      if (!query) return this.posts;\n      const lowercaseQuery = query.toLowerCase();\n      return this.posts.filter(post => post.title.toLowerCase().includes(lowercaseQuery) || post.content.toLowerCase().includes(lowercaseQuery) || post.category.toLowerCase().includes(lowercaseQuery));\n    }));\n  }\n  setSearchQuery(query) {\n    this.searchQuery.next(query);\n  }\n  getPostById(id) {\n    return this.getPosts().pipe(map(posts => posts.find(p => p.id === id)));\n  }\n  addPost(post) {\n    const newId = Math.max(...this.posts.map(p => p.id)) + 1;\n    const newPost = {\n      ...post,\n      id: newId,\n      comments: [],\n      createdAt: new Date().toISOString(),\n      likes: 0,\n      isLiked: false,\n      isFavorite: false\n    };\n    this.posts.push(newPost);\n    this.postsSubject.next([...this.posts]);\n  }\n  updatePost(id, updatedPost) {\n    const index = this.posts.findIndex(p => p.id === id);\n    if (index !== -1) {\n      this.posts[index] = {\n        ...updatedPost,\n        id,\n        comments: this.posts[index].comments,\n        likes: this.posts[index].likes,\n        isLiked: this.posts[index].isLiked,\n        isFavorite: this.posts[index].isFavorite\n      };\n      this.postsSubject.next([...this.posts]);\n      this.favoritesCount$.next(this.getFavoritesCount());\n    }\n  }\n  deletePost(id) {\n    return of(void 0).pipe(tap(() => {\n      this.posts = this.posts.filter(p => p.id !== id);\n      this.postsSubject.next([...this.posts]);\n      this.favoritesCount$.next(this.getFavoritesCount());\n    }));\n  }\n  toggleLike(postId) {\n    const post = this.posts.find(p => p.id === postId);\n    if (post) {\n      post.isLiked = !post.isLiked;\n      post.likes += post.isLiked ? 1 : -1;\n      this.postsSubject.next([...this.posts]);\n    }\n  }\n  toggleFavorite(postId) {\n    const post = this.posts.find(p => p.id === postId);\n    if (post) {\n      post.isFavorite = !post.isFavorite;\n      this.postsSubject.next([...this.posts]);\n      this.favoritesCount$.next(this.getFavoritesCount());\n    }\n  }\n  getFavorites() {\n    return this.getPosts().pipe(map(posts => posts.filter(p => p.isFavorite)));\n  }\n  getFavoritesCount() {\n    return this.posts.filter(p => p.isFavorite).length;\n  }\n  addComment(postId, comment) {\n    const post = this.posts.find(p => p.id === postId);\n    if (post) {\n      const newCommentId = post.comments.length > 0 ? Math.max(...post.comments.map(c => c.id)) + 1 : 1;\n      const newComment = {\n        id: newCommentId,\n        content: comment.content,\n        author: comment.author,\n        createdAt: new Date().toISOString()\n      };\n      post.comments.push(newComment);\n      this.postsSubject.next([...this.posts]);\n    }\n  }\n  static {\n    this.ɵfac = function PostService_Factory(t) {\n      return new (t || PostService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: PostService,\n      factory: PostService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","map","of","tap","PostService","constructor","posts","id","title","content","imageUrl","author","createdAt","category","likes","isLiked","isFavorite","comments","searchQuery","postsSubject","favoritesCount$","getFavoritesCount","getPosts","pipe","query","lowercaseQuery","toLowerCase","filter","post","includes","setSearchQuery","next","getPostById","find","p","addPost","newId","Math","max","newPost","Date","toISOString","push","updatePost","updatedPost","index","findIndex","deletePost","toggleLike","postId","toggleFavorite","getFavorites","length","addComment","comment","newCommentId","c","newComment","factory","ɵfac","providedIn"],"sources":["C:\\Users\\ghada\\Desktop\\4eme_TWIN\\projet_Microservice\\frontend\\src\\app\\services\\post.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, map, of } from 'rxjs';\nimport { tap } from 'rxjs/operators'; // Import tap\nimport { Post } from '../models/post.model';\nimport { BlogComment } from '../models/comment.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PostService {\n  private posts: Post[] = [\n    {\n      id: 1,\n      title: 'Les secrets de la peinture impressionniste',\n      content: 'L’impressionnisme est un mouvement artistique qui a révolutionné la peinture au 19e siècle...',\n      imageUrl: 'https://images.unsplash.com/photo-1579783902614-a3fb3927b6a5',\n      author: 'Marie Dupont',\n      createdAt: '2025-04-01T10:00:00',\n      category: 'Peinture',\n      likes: 15,\n      isLiked: false,\n      isFavorite: false,\n      comments: [\n        { id: 1, content: 'Article très inspirant !', author: 'Jean Martin', createdAt: '2025-04-01T10:05:00' }\n      ]\n    },\n    {\n      id: 2,\n      title: 'Sculpture moderne : une nouvelle ère',\n      content: 'La sculpture moderne a redéfini les limites de l’art tridimensionnel...',\n      imageUrl: 'https://images.unsplash.com/photo-1509042239860-d62e4d46d7a4',\n      author: 'Lucie Bernard',\n      createdAt: '2025-04-02T15:30:00',\n      category: 'Sculpture',\n      likes: 8,\n      isLiked: false,\n      isFavorite: false,\n      comments: []\n    }\n  ];\n\n  private searchQuery = new BehaviorSubject<string>('');\n  private postsSubject = new BehaviorSubject<Post[]>(this.posts);\n  public favoritesCount$ = new BehaviorSubject<number>(this.getFavoritesCount());\n\n  getPosts(): Observable<Post[]> {\n    return this.searchQuery.pipe(\n      map(query => {\n        if (!query) return this.posts;\n        const lowercaseQuery = query.toLowerCase();\n        return this.posts.filter(post =>\n          post.title.toLowerCase().includes(lowercaseQuery) ||\n          post.content.toLowerCase().includes(lowercaseQuery) ||\n          post.category.toLowerCase().includes(lowercaseQuery)\n        );\n      })\n    );\n  }\n\n  setSearchQuery(query: string) {\n    this.searchQuery.next(query);\n  }\n\n  getPostById(id: number): Observable<Post | undefined> {\n    return this.getPosts().pipe(\n      map(posts => posts.find(p => p.id === id))\n    );\n  }\n\n  addPost(post: Post) {\n    const newId = Math.max(...this.posts.map(p => p.id)) + 1;\n    const newPost: Post = { ...post, id: newId, comments: [], createdAt: new Date().toISOString(), likes: 0, isLiked: false, isFavorite: false };\n    this.posts.push(newPost);\n    this.postsSubject.next([...this.posts]);\n  }\n\n  updatePost(id: number, updatedPost: Post) {\n    const index = this.posts.findIndex(p => p.id === id);\n    if (index !== -1) {\n      this.posts[index] = { ...updatedPost, id, comments: this.posts[index].comments, likes: this.posts[index].likes, isLiked: this.posts[index].isLiked, isFavorite: this.posts[index].isFavorite };\n      this.postsSubject.next([...this.posts]);\n      this.favoritesCount$.next(this.getFavoritesCount());\n    }\n  }\n\n  deletePost(id: number): Observable<void> {\n    return of(void 0).pipe(\n      tap(() => {\n        this.posts = this.posts.filter(p => p.id !== id);\n        this.postsSubject.next([...this.posts]);\n        this.favoritesCount$.next(this.getFavoritesCount());\n      })\n    );\n  }\n\n  toggleLike(postId: number) {\n    const post = this.posts.find(p => p.id === postId);\n    if (post) {\n      post.isLiked = !post.isLiked;\n      post.likes += post.isLiked ? 1 : -1;\n      this.postsSubject.next([...this.posts]);\n    }\n  }\n\n  toggleFavorite(postId: number) {\n    const post = this.posts.find(p => p.id === postId);\n    if (post) {\n      post.isFavorite = !post.isFavorite;\n      this.postsSubject.next([...this.posts]);\n      this.favoritesCount$.next(this.getFavoritesCount());\n    }\n  }\n\n  getFavorites(): Observable<Post[]> {\n    return this.getPosts().pipe(\n      map(posts => posts.filter(p => p.isFavorite))\n    );\n  }\n\n  private getFavoritesCount(): number {\n    return this.posts.filter(p => p.isFavorite).length;\n  }\n\n  addComment(postId: number, comment: BlogComment) {\n    const post = this.posts.find(p => p.id === postId);\n    if (post) {\n      const newCommentId = post.comments.length > 0 \n        ? Math.max(...post.comments.map(c => c.id)) + 1 \n        : 1;\n      const newComment: BlogComment = {\n        id: newCommentId,\n        content: comment.content,\n        author: comment.author,\n        createdAt: new Date().toISOString()\n      };\n      post.comments.push(newComment);\n      this.postsSubject.next([...this.posts]);\n    }\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}