{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class NotificationService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:8080/api/notifications';\n    this.notificationsSubject = new BehaviorSubject([]);\n    this.notifications$ = this.notificationsSubject.asObservable();\n    this.notificationCountSubject = new BehaviorSubject(0);\n    this.notificationCount$ = this.notificationCountSubject.asObservable();\n  }\n  loadNotifications(userId) {\n    this.http.get(`${this.apiUrl}/user/${userId}`).subscribe(notifications => {\n      this.notificationsSubject.next(notifications);\n      this.updateNotificationCount();\n    }, error => console.error('Erreur lors du chargement des notifications:', error));\n  }\n  loadUnreadNotifications(userId) {\n    this.http.get(`${this.apiUrl}/user/${userId}/unread`).subscribe(notifications => {\n      this.notificationsSubject.next(notifications);\n      this.updateNotificationCount();\n    }, error => console.error('Erreur lors du chargement des notifications non lues:', error));\n  }\n  markAsRead(notificationId) {\n    this.http.post(`${this.apiUrl}/${notificationId}/read`, {}).subscribe(() => {\n      const notifications = this.notificationsSubject.getValue().map(n => n.id === notificationId ? {\n        ...n,\n        read: true\n      } : n);\n      this.notificationsSubject.next(notifications);\n      this.updateNotificationCount();\n    }, error => console.error('Erreur lors de la mise à jour de la notification:', error));\n  }\n  clearNotifications(userId) {\n    this.http.delete(`${this.apiUrl}/user/${userId}`).subscribe(() => {\n      this.notificationsSubject.next([]);\n      this.updateNotificationCount();\n    }, error => console.error('Erreur lors de la suppression des notifications:', error));\n  }\n  updateNotificationCount() {\n    const unreadCount = this.notificationsSubject.getValue().filter(n => !n.read).length;\n    this.notificationCountSubject.next(unreadCount);\n  }\n  static {\n    this.ɵfac = function NotificationService_Factory(t) {\n      return new (t || NotificationService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: NotificationService,\n      factory: NotificationService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","NotificationService","constructor","http","apiUrl","notificationsSubject","notifications$","asObservable","notificationCountSubject","notificationCount$","loadNotifications","userId","get","subscribe","notifications","next","updateNotificationCount","error","console","loadUnreadNotifications","markAsRead","notificationId","post","getValue","map","n","id","read","clearNotifications","delete","unreadCount","filter","length","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\ghada\\Desktop\\4eme_TWIN\\projet_Microservice\\frontend\\src\\app\\services\\notification.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\n\r\nexport interface Notification {\r\n  id: string; // Changé de number à string\r\n  message: string;\r\n  postId: string; // Changé de number à string\r\n  read: boolean;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NotificationService {\r\n  private apiUrl = 'http://localhost:8080/api/notifications';\r\n  private notificationsSubject = new BehaviorSubject<Notification[]>([]);\r\n  public notifications$: Observable<Notification[]> = this.notificationsSubject.asObservable();\r\n\r\n  private notificationCountSubject = new BehaviorSubject<number>(0);\r\n  public notificationCount$: Observable<number> = this.notificationCountSubject.asObservable();\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  loadNotifications(userId: string): void {\r\n    this.http.get<Notification[]>(`${this.apiUrl}/user/${userId}`).subscribe(\r\n      notifications => {\r\n        this.notificationsSubject.next(notifications);\r\n        this.updateNotificationCount();\r\n      },\r\n      error => console.error('Erreur lors du chargement des notifications:', error)\r\n    );\r\n  }\r\n\r\n  loadUnreadNotifications(userId: string): void {\r\n    this.http.get<Notification[]>(`${this.apiUrl}/user/${userId}/unread`).subscribe(\r\n      notifications => {\r\n        this.notificationsSubject.next(notifications);\r\n        this.updateNotificationCount();\r\n      },\r\n      error => console.error('Erreur lors du chargement des notifications non lues:', error)\r\n    );\r\n  }\r\n\r\n  markAsRead(notificationId: string): void {\r\n    this.http.post<void>(`${this.apiUrl}/${notificationId}/read`, {}).subscribe(\r\n      () => {\r\n        const notifications = this.notificationsSubject.getValue().map(n =>\r\n          n.id === notificationId ? { ...n, read: true } : n\r\n        );\r\n        this.notificationsSubject.next(notifications);\r\n        this.updateNotificationCount();\r\n      },\r\n      error => console.error('Erreur lors de la mise à jour de la notification:', error)\r\n    );\r\n  }\r\n\r\n  clearNotifications(userId: string): void {\r\n    this.http.delete<void>(`${this.apiUrl}/user/${userId}`).subscribe(\r\n      () => {\r\n        this.notificationsSubject.next([]);\r\n        this.updateNotificationCount();\r\n      },\r\n      error => console.error('Erreur lors de la suppression des notifications:', error)\r\n    );\r\n  }\r\n\r\n  private updateNotificationCount(): void {\r\n    const unreadCount = this.notificationsSubject.getValue().filter(n => !n.read).length;\r\n    this.notificationCountSubject.next(unreadCount);\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}