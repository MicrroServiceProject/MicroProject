{"ast":null,"code":"import { BehaviorSubject, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./notification.service\";\n// Define allowed categories\nconst VALID_CATEGORIES = ['Peinture', 'Sculpture', 'Photographie', 'Art Numérique'];\nexport class PostService {\n  constructor(notificationService) {\n    this.notificationService = notificationService;\n    this.posts = [{\n      id: 1,\n      title: 'Les couleurs de l\\'automne',\n      content: 'Un article sur l\\'utilisation des couleurs automnales dans la peinture...',\n      imageUrl: 'https://images.unsplash.com/photo-1507525428034-b723cf961d3e',\n      author: 'Marie Dupont',\n      createdAt: new Date('2023-10-01').toISOString(),\n      category: 'Peinture',\n      likes: 5,\n      isLiked: false,\n      isFavorite: false,\n      comments: [],\n      views: 10\n    }, {\n      id: 2,\n      title: 'Sculpture moderne',\n      content: 'Exploration des techniques de sculpture contemporaine...',\n      imageUrl: 'https://images.unsplash.com/photo-1549880338-65ddcdfd017b',\n      author: 'Jean Martin',\n      createdAt: new Date('2023-09-15').toISOString(),\n      category: 'Sculpture',\n      likes: 3,\n      isLiked: false,\n      isFavorite: false,\n      comments: [],\n      views: 8\n    }];\n    this.postIdCounter = this.posts.length; // Initialize counter based on initial data\n    this.postsSubject = new BehaviorSubject(this.posts);\n    this.filteredPostsSubject = new BehaviorSubject(this.posts); // For search results\n    this.favoritesSubject = new BehaviorSubject(this.getFavoritesSync());\n  }\n  getPosts() {\n    return this.filteredPostsSubject.asObservable(); // Return filtered posts\n  }\n\n  getAllPosts() {\n    return this.postsSubject.asObservable(); // Return all posts (unfiltered)\n  }\n\n  getPostById(id) {\n    const post = this.posts.find(p => p.id === id);\n    if (post) {\n      post.views = (post.views || 0) + 1;\n      this.posts = [...this.posts]; // Trigger change detection\n      this.postsSubject.next(this.posts);\n      this.filteredPostsSubject.next(this.filteredPostsSubject.getValue());\n    }\n    return of(post);\n  }\n  addPost(post) {\n    this.validatePost(post);\n    this.postIdCounter++; // Increment counter for unique ID\n    const newPost = {\n      ...post,\n      id: this.postIdCounter,\n      comments: [],\n      createdAt: new Date().toISOString(),\n      likes: 0,\n      isLiked: false,\n      isFavorite: false,\n      views: 0\n    };\n    this.posts = [...this.posts, newPost]; // Immutable update\n    this.postsSubject.next(this.posts);\n    this.filteredPostsSubject.next(this.posts); // Reset filtered posts\n    this.notificationService.addNotification(`Nouveau post publié : ${newPost.title}`, newPost.id);\n  }\n  updatePost(id, updatedPost) {\n    this.validatePost(updatedPost);\n    const index = this.posts.findIndex(p => p.id === id);\n    if (index === -1) {\n      throw new Error(`Post with ID ${id} not found`);\n    }\n    this.posts = this.posts.map(p => p.id === id ? {\n      ...p,\n      ...updatedPost\n    } : p); // Immutable update\n    this.postsSubject.next(this.posts);\n    this.filteredPostsSubject.next(this.filteredPostsSubject.getValue());\n    this.favoritesSubject.next(this.getFavoritesSync());\n  }\n  deletePost(id) {\n    const index = this.posts.findIndex(p => p.id === id);\n    if (index === -1) {\n      throw new Error(`Post with ID ${id} not found`);\n    }\n    this.posts = this.posts.filter(p => p.id !== id); // Immutable update\n    this.postsSubject.next(this.posts);\n    this.filteredPostsSubject.next(this.filteredPostsSubject.getValue());\n    this.favoritesSubject.next(this.getFavoritesSync());\n  }\n  toggleLike(postId) {\n    const post = this.posts.find(p => p.id === postId);\n    if (!post) {\n      throw new Error(`Post with ID ${postId} not found`);\n    }\n    post.isLiked = !post.isLiked;\n    post.likes = post.isLiked ? post.likes + 1 : Math.max(0, post.likes - 1); // Prevent negative likes\n    this.posts = [...this.posts]; // Trigger change detection\n    this.postsSubject.next(this.posts);\n    this.filteredPostsSubject.next(this.filteredPostsSubject.getValue());\n    this.favoritesSubject.next(this.getFavoritesSync());\n  }\n  toggleFavorite(postId) {\n    const post = this.posts.find(p => p.id === postId);\n    if (!post) {\n      throw new Error(`Post with ID ${postId} not found`);\n    }\n    post.isFavorite = !post.isFavorite;\n    this.posts = [...this.posts]; // Trigger change detection\n    this.postsSubject.next(this.posts);\n    this.filteredPostsSubject.next(this.filteredPostsSubject.getValue());\n    this.favoritesSubject.next(this.getFavoritesSync());\n  }\n  getFavorites() {\n    return this.favoritesSubject.asObservable();\n  }\n  getFavoritesSync() {\n    return this.posts.filter(p => p.isFavorite);\n  }\n  get favoritesCount$() {\n    return this.getFavorites().pipe(map(favorites => favorites.length));\n  }\n  setSearchQuery(query) {\n    if (!query.trim()) {\n      this.filteredPostsSubject.next(this.posts); // Reset to all posts if query is empty\n      return;\n    }\n    const filteredPosts = this.posts.filter(post => post.title.toLowerCase().includes(query.toLowerCase()) || post.content.toLowerCase().includes(query.toLowerCase()));\n    this.filteredPostsSubject.next(filteredPosts);\n  }\n  resetSearch() {\n    this.filteredPostsSubject.next(this.posts); // Reset to all posts\n  }\n\n  addComment(postId, comment) {\n    const post = this.posts.find(p => p.id === postId);\n    if (!post) {\n      throw new Error(`Post with ID ${postId} not found`);\n    }\n    const commentIdCounter = post.comments.length ? Math.max(...post.comments.map(c => c.id)) + 1 : 1; // Ensure unique comment IDs\n    const newComment = {\n      ...comment,\n      id: commentIdCounter,\n      createdAt: new Date().toISOString()\n    };\n    post.comments = [...post.comments, newComment]; // Immutable update\n    this.posts = [...this.posts]; // Trigger change detection\n    this.postsSubject.next(this.posts);\n    this.filteredPostsSubject.next(this.filteredPostsSubject.getValue());\n  }\n  validatePost(post) {\n    if (!VALID_CATEGORIES.includes(post.category)) {\n      throw new Error(`Invalid category: ${post.category}. Must be one of ${VALID_CATEGORIES.join(', ')}`);\n    }\n    if (!post.title || !post.content || !post.imageUrl || !post.author) {\n      throw new Error('Title, content, imageUrl, and author are required');\n    }\n  }\n  static {\n    this.ɵfac = function PostService_Factory(t) {\n      return new (t || PostService)(i0.ɵɵinject(i1.NotificationService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: PostService,\n      factory: PostService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","of","map","VALID_CATEGORIES","PostService","constructor","notificationService","posts","id","title","content","imageUrl","author","createdAt","Date","toISOString","category","likes","isLiked","isFavorite","comments","views","postIdCounter","length","postsSubject","filteredPostsSubject","favoritesSubject","getFavoritesSync","getPosts","asObservable","getAllPosts","getPostById","post","find","p","next","getValue","addPost","validatePost","newPost","addNotification","updatePost","updatedPost","index","findIndex","Error","deletePost","filter","toggleLike","postId","Math","max","toggleFavorite","getFavorites","favoritesCount$","pipe","favorites","setSearchQuery","query","trim","filteredPosts","toLowerCase","includes","resetSearch","addComment","comment","commentIdCounter","c","newComment","join","i0","ɵɵinject","i1","NotificationService","factory","ɵfac","providedIn"],"sources":["C:\\Users\\ghada\\Desktop\\4eme_TWIN\\projet_Microservice\\frontend\\src\\app\\services\\post.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Post} from '../models/post.model';\nimport{BlogComment}\nimport { NotificationService } from './notification.service';\n\n// Define allowed categories\nconst VALID_CATEGORIES = ['Peinture', 'Sculpture', 'Photographie', 'Art Numérique'] as const;\ntype PostCategory = typeof VALID_CATEGORIES[number];\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PostService {\n  private posts: Post[] = [\n    {\n      id: 1,\n      title: 'Les couleurs de l\\'automne',\n      content: 'Un article sur l\\'utilisation des couleurs automnales dans la peinture...',\n      imageUrl: 'https://images.unsplash.com/photo-1507525428034-b723cf961d3e',\n      author: 'Marie Dupont',\n      createdAt: new Date('2023-10-01').toISOString(),\n      category: 'Peinture',\n      likes: 5,\n      isLiked: false,\n      isFavorite: false,\n      comments: [],\n      views: 10\n    },\n    {\n      id: 2,\n      title: 'Sculpture moderne',\n      content: 'Exploration des techniques de sculpture contemporaine...',\n      imageUrl: 'https://images.unsplash.com/photo-1549880338-65ddcdfd017b',\n      author: 'Jean Martin',\n      createdAt: new Date('2023-09-15').toISOString(),\n      category: 'Sculpture',\n      likes: 3,\n      isLiked: false,\n      isFavorite: false,\n      comments: [],\n      views: 8\n    }\n  ];\n\n  private postIdCounter = this.posts.length; // Initialize counter based on initial data\n  private postsSubject = new BehaviorSubject<Post[]>(this.posts);\n  private filteredPostsSubject = new BehaviorSubject<Post[]>(this.posts); // For search results\n  private favoritesSubject = new BehaviorSubject<Post[]>(this.getFavoritesSync());\n\n  constructor(private notificationService: NotificationService) {}\n\n  getPosts(): Observable<Post[]> {\n    return this.filteredPostsSubject.asObservable(); // Return filtered posts\n  }\n\n  getAllPosts(): Observable<Post[]> {\n    return this.postsSubject.asObservable(); // Return all posts (unfiltered)\n  }\n\n  getPostById(id: number): Observable<Post | undefined> {\n    const post = this.posts.find(p => p.id === id);\n    if (post) {\n      post.views = (post.views || 0) + 1;\n      this.posts = [...this.posts]; // Trigger change detection\n      this.postsSubject.next(this.posts);\n      this.filteredPostsSubject.next(this.filteredPostsSubject.getValue());\n    }\n    return of(post);\n  }\n\n  addPost(post: Post): void {\n    this.validatePost(post);\n    this.postIdCounter++; // Increment counter for unique ID\n    const newPost: Post = {\n      ...post,\n      id: this.postIdCounter,\n      comments: [],\n      createdAt: new Date().toISOString(),\n      likes: 0,\n      isLiked: false,\n      isFavorite: false,\n      views: 0\n    };\n    this.posts = [...this.posts, newPost]; // Immutable update\n    this.postsSubject.next(this.posts);\n    this.filteredPostsSubject.next(this.posts); // Reset filtered posts\n    this.notificationService.addNotification(`Nouveau post publié : ${newPost.title}`, newPost.id);\n  }\n\n  updatePost(id: number, updatedPost: Post): void {\n    this.validatePost(updatedPost);\n    const index = this.posts.findIndex(p => p.id === id);\n    if (index === -1) {\n      throw new Error(`Post with ID ${id} not found`);\n    }\n    this.posts = this.posts.map(p =>\n      p.id === id ? { ...p, ...updatedPost } : p\n    ); // Immutable update\n    this.postsSubject.next(this.posts);\n    this.filteredPostsSubject.next(this.filteredPostsSubject.getValue());\n    this.favoritesSubject.next(this.getFavoritesSync());\n  }\n\n  deletePost(id: number): void {\n    const index = this.posts.findIndex(p => p.id === id);\n    if (index === -1) {\n      throw new Error(`Post with ID ${id} not found`);\n    }\n    this.posts = this.posts.filter(p => p.id !== id); // Immutable update\n    this.postsSubject.next(this.posts);\n    this.filteredPostsSubject.next(this.filteredPostsSubject.getValue());\n    this.favoritesSubject.next(this.getFavoritesSync());\n  }\n\n  toggleLike(postId: number): void {\n    const post = this.posts.find(p => p.id === postId);\n    if (!post) {\n      throw new Error(`Post with ID ${postId} not found`);\n    }\n    post.isLiked = !post.isLiked;\n    post.likes = post.isLiked ? post.likes + 1 : Math.max(0, post.likes - 1); // Prevent negative likes\n    this.posts = [...this.posts]; // Trigger change detection\n    this.postsSubject.next(this.posts);\n    this.filteredPostsSubject.next(this.filteredPostsSubject.getValue());\n    this.favoritesSubject.next(this.getFavoritesSync());\n  }\n\n  toggleFavorite(postId: number): void {\n    const post = this.posts.find(p => p.id === postId);\n    if (!post) {\n      throw new Error(`Post with ID ${postId} not found`);\n    }\n    post.isFavorite = !post.isFavorite;\n    this.posts = [...this.posts]; // Trigger change detection\n    this.postsSubject.next(this.posts);\n    this.filteredPostsSubject.next(this.filteredPostsSubject.getValue());\n    this.favoritesSubject.next(this.getFavoritesSync());\n  }\n\n  getFavorites(): Observable<Post[]> {\n    return this.favoritesSubject.asObservable();\n  }\n\n  private getFavoritesSync(): Post[] {\n    return this.posts.filter(p => p.isFavorite);\n  }\n\n  get favoritesCount$(): Observable<number> {\n    return this.getFavorites().pipe(\n      map(favorites => favorites.length)\n    );\n  }\n\n  setSearchQuery(query: string): void {\n    if (!query.trim()) {\n      this.filteredPostsSubject.next(this.posts); // Reset to all posts if query is empty\n      return;\n    }\n    const filteredPosts = this.posts.filter(post =>\n      post.title.toLowerCase().includes(query.toLowerCase()) ||\n      post.content.toLowerCase().includes(query.toLowerCase())\n    );\n    this.filteredPostsSubject.next(filteredPosts);\n  }\n\n  resetSearch(): void {\n    this.filteredPostsSubject.next(this.posts); // Reset to all posts\n  }\n\n  addComment(postId: number, comment: BlogComment): void {\n    const post = this.posts.find(p => p.id === postId);\n    if (!post) {\n      throw new Error(`Post with ID ${postId} not found`);\n    }\n    const commentIdCounter = post.comments.length\n      ? Math.max(...post.comments.map(c => c.id)) + 1\n      : 1; // Ensure unique comment IDs\n    const newComment: BlogComment = {\n      ...comment,\n      id: commentIdCounter,\n      createdAt: new Date().toISOString()\n    };\n    post.comments = [...post.comments, newComment]; // Immutable update\n    this.posts = [...this.posts]; // Trigger change detection\n    this.postsSubject.next(this.posts);\n    this.filteredPostsSubject.next(this.filteredPostsSubject.getValue());\n  }\n\n  private validatePost(post: Post): void {\n    if (!VALID_CATEGORIES.includes(post.category as PostCategory)) {\n      throw new Error(`Invalid category: ${post.category}. Must be one of ${VALID_CATEGORIES.join(', ')}`);\n    }\n    if (!post.title || !post.content || !post.imageUrl || !post.author) {\n      throw new Error('Title, content, imageUrl, and author are required');\n    }\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}