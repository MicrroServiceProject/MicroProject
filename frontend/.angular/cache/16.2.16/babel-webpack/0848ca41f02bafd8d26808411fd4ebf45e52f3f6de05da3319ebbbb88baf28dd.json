{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/ghada/Desktop/4eme_TWIN/projet_Microservice/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./notification.service\";\nexport class PostService {\n  constructor(http, notificationService) {\n    this.http = http;\n    this.notificationService = notificationService;\n    this.apiUrl = 'http://localhost:8080/api/posts';\n    this.commentsApiUrl = 'http://localhost:8080/api/comments';\n    this.postsSubject = new BehaviorSubject([]);\n    this.filteredPostsSubject = new BehaviorSubject([]);\n    this.favoritesSubject = new BehaviorSubject([]);\n    this.loadPosts();\n  }\n  loadPosts() {\n    this.http.get(this.apiUrl).subscribe(posts => {\n      this.postsSubject.next(posts);\n      this.filteredPostsSubject.next(posts);\n      this.favoritesSubject.next(this.getFavoritesSync());\n    }, error => console.error('Erreur lors du chargement des posts:', error));\n  }\n  getPosts() {\n    return this.filteredPostsSubject.asObservable();\n  }\n  getAllPosts() {\n    return this.postsSubject.asObservable();\n  }\n  getPostById(id) {\n    return this.http.get(`${this.apiUrl}/${id}`).pipe(map(post => {\n      this.loadComments(post.id).subscribe(comments => {\n        post.comments = comments;\n        this.postsSubject.next([...this.postsSubject.getValue()]);\n      });\n      return post;\n    }));\n  }\n  addPost(post) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const newPost = yield _this.http.post(_this.apiUrl, {\n          ...post,\n          authorId: '1'\n        }).toPromise();\n        if (newPost) {\n          _this.loadPosts(); // Rafraîchir la liste après ajout\n        } else {\n          throw new Error('Le post retourné est undefined');\n        }\n      } catch (error) {\n        console.error('Erreur lors de l\\'ajout du post:', error);\n        throw error;\n      }\n    })();\n  }\n  updatePost(id, updatedPost) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const updated = yield _this2.http.put(`${_this2.apiUrl}/${id}`, updatedPost).toPromise();\n        if (updated) {\n          _this2.loadPosts(); // Rafraîchir la liste après mise à jour\n        } else {\n          throw new Error('Le post mis à jour est undefined');\n        }\n      } catch (error) {\n        console.error('Erreur lors de la mise à jour du post:', error);\n        throw error;\n      }\n    })();\n  }\n  deletePost(id) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        yield _this3.http.delete(`${_this3.apiUrl}/${id}`).toPromise();\n        _this3.loadPosts(); // Rafraîchir la liste après suppression\n      } catch (error) {\n        console.error('Erreur lors de la suppression du post:', error);\n        throw error;\n      }\n    })();\n  }\n  toggleLike(postId) {\n    this.http.post(`${this.apiUrl}/${postId}/like`, {}).subscribe(() => {\n      this.loadPosts(); // Rafraîchir la liste après toggle like\n    }, error => console.error('Erreur lors du toggle like:', error));\n  }\n  toggleFavorite(postId) {\n    this.http.post(`${this.apiUrl}/${postId}/favorite`, {}).subscribe(() => {\n      this.loadPosts(); // Rafraîchir la liste après toggle favorite\n    }, error => console.error('Erreur lors du toggle favorite:', error));\n  }\n  getFavorites() {\n    return this.favoritesSubject.asObservable();\n  }\n  getFavoritesSync() {\n    return this.postsSubject.getValue().filter(p => p.isFavorite);\n  }\n  get favoritesCount$() {\n    return this.getFavorites().pipe(map(favorites => favorites.length));\n  }\n  setSearchQuery(query) {\n    if (!query.trim()) {\n      this.filteredPostsSubject.next(this.postsSubject.getValue());\n      return;\n    }\n    this.http.get(`${this.apiUrl}/search?query=${query}`).subscribe(filteredPosts => this.filteredPostsSubject.next(filteredPosts), error => console.error('Erreur lors de la recherche:', error));\n  }\n  resetSearch() {\n    this.filteredPostsSubject.next(this.postsSubject.getValue());\n  }\n  addComment(postId, comment) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const newComment = yield _this4.http.post(_this4.commentsApiUrl, {\n          ...comment,\n          postId,\n          authorId: '1'\n        }).toPromise();\n        if (newComment) {\n          _this4.loadPosts(); // Rafraîchir la liste après ajout de commentaire\n        } else {\n          throw new Error('Le commentaire retourné est undefined');\n        }\n      } catch (error) {\n        console.error('Erreur lors de l\\'ajout du commentaire:', error);\n        throw error;\n      }\n    })();\n  }\n  loadComments(postId) {\n    return this.http.get(`${this.commentsApiUrl}/post/${postId}`).pipe(map(comments => comments.map(comment => ({\n      id: comment.id,\n      content: comment.content,\n      authorUsername: comment.authorUsername,\n      createdAt: comment.createdAt\n    }))));\n  }\n  static {\n    this.ɵfac = function PostService_Factory(t) {\n      return new (t || PostService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.NotificationService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: PostService,\n      factory: PostService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","map","PostService","constructor","http","notificationService","apiUrl","commentsApiUrl","postsSubject","filteredPostsSubject","favoritesSubject","loadPosts","get","subscribe","posts","next","getFavoritesSync","error","console","getPosts","asObservable","getAllPosts","getPostById","id","pipe","post","loadComments","comments","getValue","addPost","_this","_asyncToGenerator","newPost","authorId","toPromise","Error","updatePost","updatedPost","_this2","updated","put","deletePost","_this3","delete","toggleLike","postId","toggleFavorite","getFavorites","filter","p","isFavorite","favoritesCount$","favorites","length","setSearchQuery","query","trim","filteredPosts","resetSearch","addComment","comment","_this4","newComment","content","authorUsername","createdAt","i0","ɵɵinject","i1","HttpClient","i2","NotificationService","factory","ɵfac","providedIn"],"sources":["C:\\Users\\ghada\\Desktop\\4eme_TWIN\\projet_Microservice\\frontend\\src\\app\\services\\post.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { Post } from '../models/post.model';\nimport { BlogComment } from '../models/comment.model';\nimport { NotificationService } from './notification.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PostService {\n  private apiUrl = 'http://localhost:8080/api/posts';\n  private commentsApiUrl = 'http://localhost:8080/api/comments';\n  private postsSubject = new BehaviorSubject<Post[]>([]);\n  private filteredPostsSubject = new BehaviorSubject<Post[]>([]);\n  private favoritesSubject = new BehaviorSubject<Post[]>([]);\n\n  constructor(\n    private http: HttpClient,\n    private notificationService: NotificationService\n  ) {\n    this.loadPosts();\n  }\n\n  private loadPosts(): void {\n    this.http.get<Post[]>(this.apiUrl).subscribe(\n      posts => {\n        this.postsSubject.next(posts);\n        this.filteredPostsSubject.next(posts);\n        this.favoritesSubject.next(this.getFavoritesSync());\n      },\n      error => console.error('Erreur lors du chargement des posts:', error)\n    );\n  }\n\n  getPosts(): Observable<Post[]> {\n    return this.filteredPostsSubject.asObservable();\n  }\n\n  getAllPosts(): Observable<Post[]> {\n    return this.postsSubject.asObservable();\n  }\n\n  getPostById(id: string): Observable<Post | undefined> {\n    return this.http.get<Post>(`${this.apiUrl}/${id}`).pipe(\n      map(post => {\n        this.loadComments(post.id).subscribe(comments => {\n          post.comments = comments;\n          this.postsSubject.next([...this.postsSubject.getValue()]);\n        });\n        return post;\n      })\n    );\n  }\n\n  async addPost(post: Post): Promise<void> {\n    try {\n      const newPost = await this.http.post<Post>(this.apiUrl, { ...post, authorId: '1' }).toPromise();\n      if (newPost) {\n        this.loadPosts(); // Rafraîchir la liste après ajout\n      } else {\n        throw new Error('Le post retourné est undefined');\n      }\n    } catch (error) {\n      console.error('Erreur lors de l\\'ajout du post:', error);\n      throw error;\n    }\n  }\n\n  async updatePost(id: string, updatedPost: Post): Promise<void> {\n    try {\n      const updated = await this.http.put<Post>(`${this.apiUrl}/${id}`, updatedPost).toPromise();\n      if (updated) {\n        this.loadPosts(); // Rafraîchir la liste après mise à jour\n      } else {\n        throw new Error('Le post mis à jour est undefined');\n      }\n    } catch (error) {\n      console.error('Erreur lors de la mise à jour du post:', error);\n      throw error;\n    }\n  }\n\n  async deletePost(id: string): Promise<void> {\n    try {\n      await this.http.delete<void>(`${this.apiUrl}/${id}`).toPromise();\n      this.loadPosts(); // Rafraîchir la liste après suppression\n    } catch (error) {\n      console.error('Erreur lors de la suppression du post:', error);\n      throw error;\n    }\n  }\n\n  toggleLike(postId: string): void {\n    this.http.post<void>(`${this.apiUrl}/${postId}/like`, {}).subscribe(\n      () => {\n        this.loadPosts(); // Rafraîchir la liste après toggle like\n      },\n      error => console.error('Erreur lors du toggle like:', error)\n    );\n  }\n\n  toggleFavorite(postId: string): void {\n    this.http.post<void>(`${this.apiUrl}/${postId}/favorite`, {}).subscribe(\n      () => {\n        this.loadPosts(); // Rafraîchir la liste après toggle favorite\n      },\n      error => console.error('Erreur lors du toggle favorite:', error)\n    );\n  }\n\n  getFavorites(): Observable<Post[]> {\n    return this.favoritesSubject.asObservable();\n  }\n\n  private getFavoritesSync(): Post[] {\n    return this.postsSubject.getValue().filter(p => p.isFavorite);\n  }\n\n  get favoritesCount$(): Observable<number> {\n    return this.getFavorites().pipe(map(favorites => favorites.length));\n  }\n\n  setSearchQuery(query: string): void {\n    if (!query.trim()) {\n      this.filteredPostsSubject.next(this.postsSubject.getValue());\n      return;\n    }\n    this.http.get<Post[]>(`${this.apiUrl}/search?query=${query}`).subscribe(\n      filteredPosts => this.filteredPostsSubject.next(filteredPosts),\n      error => console.error('Erreur lors de la recherche:', error)\n    );\n  }\n\n  resetSearch(): void {\n    this.filteredPostsSubject.next(this.postsSubject.getValue());\n  }\n\n  async addComment(postId: string, comment: BlogComment): Promise<void> {\n    try {\n      const newComment = await this.http.post<any>(this.commentsApiUrl, { ...comment, postId, authorId: '1' }).toPromise();\n      if (newComment) {\n        this.loadPosts(); // Rafraîchir la liste après ajout de commentaire\n      } else {\n        throw new Error('Le commentaire retourné est undefined');\n      }\n    } catch (error) {\n      console.error('Erreur lors de l\\'ajout du commentaire:', error);\n      throw error;\n    }\n  }\n\n  private loadComments(postId: string): Observable<BlogComment[]> {\n    return this.http.get<any[]>(`${this.commentsApiUrl}/post/${postId}`).pipe(\n      map(comments => comments.map(comment => ({\n        id: comment.id,\n        content: comment.content,\n        authorUsername: comment.authorUsername,\n        createdAt: comment.createdAt\n      })))\n    );\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}