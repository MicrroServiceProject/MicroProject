{"ast":null,"code":"import { BehaviorSubject, of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./notification.service\";\nexport class PostService {\n  constructor(notificationService) {\n    this.notificationService = notificationService;\n    this.posts = [{\n      id: 1,\n      title: 'Les couleurs de l\\'automne',\n      content: 'Un article sur l\\'utilisation des couleurs automnales dans la peinture...',\n      imageUrl: 'https://images.unsplash.com/photo-1507525428034-b723cf961d3e',\n      author: 'Marie Dupont',\n      createdAt: new Date('2023-10-01').toISOString(),\n      category: 'Peinture',\n      likes: 5,\n      isLiked: false,\n      isFavorite: false,\n      comments: [],\n      views: 10 // Initialize views\n    }, {\n      id: 2,\n      title: 'Sculpture moderne',\n      content: 'Exploration des techniques de sculpture contemporaine...',\n      imageUrl: 'https://images.unsplash.com/photo-1549880338-65ddcdfd017b',\n      author: 'Jean Martin',\n      createdAt: new Date('2023-09-15').toISOString(),\n      category: 'Sculpture',\n      likes: 3,\n      isLiked: false,\n      isFavorite: false,\n      comments: [],\n      views: 8 // Initialize views\n    }];\n\n    this.postsSubject = new BehaviorSubject(this.posts);\n    this.favoritesSubject = new BehaviorSubject(this.getFavoritesSync());\n  }\n  getPosts() {\n    return this.postsSubject.asObservable();\n  }\n  getPostById(id) {\n    const post = this.posts.find(p => p.id === id);\n    if (post) {\n      post.views = (post.views || 0) + 1; // Increment views\n      this.postsSubject.next([...this.posts]);\n    }\n    return of(post);\n  }\n  addPost(post) {\n    const newId = Math.max(...this.posts.map(p => p.id), 0) + 1;\n    const newPost = {\n      ...post,\n      id: newId,\n      comments: [],\n      createdAt: new Date().toISOString(),\n      likes: 0,\n      isLiked: false,\n      isFavorite: false,\n      views: 0 // Initialize views\n    };\n\n    this.posts.push(newPost);\n    this.postsSubject.next([...this.posts]);\n    // Emit notification\n    this.notificationService.addNotification(`Nouveau post publié : ${newPost.title}`, newPost.id);\n  }\n  updatePost(id, updatedPost) {\n    const index = this.posts.findIndex(p => p.id === id);\n    if (index !== -1) {\n      this.posts[index] = {\n        ...this.posts[index],\n        ...updatedPost\n      };\n      this.postsSubject.next([...this.posts]);\n      this.favoritesSubject.next(this.getFavoritesSync());\n    }\n  }\n  deletePost(id) {\n    this.posts = this.posts.filter(p => p.id !== id);\n    this.postsSubject.next([...this.posts]);\n    this.favoritesSubject.next(this.getFavoritesSync());\n  }\n  toggleLike(postId) {\n    const post = this.posts.find(p => p.id === postId);\n    if (post) {\n      post.isLiked = !post.isLiked;\n      post.likes = post.isLiked ? post.likes + 1 : post.likes - 1;\n      this.postsSubject.next([...this.posts]);\n      this.favoritesSubject.next(this.getFavoritesSync());\n    }\n  }\n  toggleFavorite(postId) {\n    const post = this.posts.find(p => p.id === postId);\n    if (post) {\n      post.isFavorite = !post.isFavorite;\n      this.postsSubject.next([...this.posts]);\n      this.favoritesSubject.next(this.getFavoritesSync());\n    }\n  }\n  getFavorites() {\n    return this.favoritesSubject.asObservable();\n  }\n  getFavoritesSync() {\n    return this.posts.filter(p => p.isFavorite);\n  }\n  get favoritesCount$() {\n    return this.getFavorites().pipe(map(favorites => favorites.length));\n  }\n  setSearchQuery(query) {\n    const filteredPosts = this.posts.filter(post => post.title.toLowerCase().includes(query.toLowerCase()) || post.content.toLowerCase().includes(query.toLowerCase()));\n    this.postsSubject.next(filteredPosts);\n  }\n  addComment(postId, comment) {\n    const post = this.posts.find(p => p.id === postId);\n    if (post) {\n      const newComment = {\n        ...comment,\n        id: post.comments.length + 1,\n        createdAt: new Date().toISOString()\n      };\n      post.comments.push(newComment);\n      this.postsSubject.next([...this.posts]);\n    }\n  }\n  static {\n    this.ɵfac = function PostService_Factory(t) {\n      return new (t || PostService)(i0.ɵɵinject(i1.NotificationService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: PostService,\n      factory: PostService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","of","PostService","constructor","notificationService","posts","id","title","content","imageUrl","author","createdAt","Date","toISOString","category","likes","isLiked","isFavorite","comments","views","postsSubject","favoritesSubject","getFavoritesSync","getPosts","asObservable","getPostById","post","find","p","next","addPost","newId","Math","max","map","newPost","push","addNotification","updatePost","updatedPost","index","findIndex","deletePost","filter","toggleLike","postId","toggleFavorite","getFavorites","favoritesCount$","pipe","favorites","length","setSearchQuery","query","filteredPosts","toLowerCase","includes","addComment","comment","newComment","i0","ɵɵinject","i1","NotificationService","factory","ɵfac","providedIn"],"sources":["C:\\Users\\ghada\\Desktop\\4eme_TWIN\\projet_Microservice\\frontend\\src\\app\\services\\post.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { Post, BlogComment } from '../models/post.model';\nimport { NotificationService } from './notification.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PostService {\n  private posts: Post[] = [\n    {\n      id: 1,\n      title: 'Les couleurs de l\\'automne',\n      content: 'Un article sur l\\'utilisation des couleurs automnales dans la peinture...',\n      imageUrl: 'https://images.unsplash.com/photo-1507525428034-b723cf961d3e',\n      author: 'Marie Dupont',\n      createdAt: new Date('2023-10-01').toISOString(),\n      category: 'Peinture',\n      likes: 5,\n      isLiked: false,\n      isFavorite: false,\n      comments: [],\n      views: 10 // Initialize views\n    },\n    {\n      id: 2,\n      title: 'Sculpture moderne',\n      content: 'Exploration des techniques de sculpture contemporaine...',\n      imageUrl: 'https://images.unsplash.com/photo-1549880338-65ddcdfd017b',\n      author: 'Jean Martin',\n      createdAt: new Date('2023-09-15').toISOString(),\n      category: 'Sculpture',\n      likes: 3,\n      isLiked: false,\n      isFavorite: false,\n      comments: [],\n      views: 8 // Initialize views\n    }\n  ];\n\n  private postsSubject = new BehaviorSubject<Post[]>(this.posts);\n  private favoritesSubject = new BehaviorSubject<Post[]>(this.getFavoritesSync());\n\n  constructor(private notificationService: NotificationService) {}\n\n  getPosts(): Observable<Post[]> {\n    return this.postsSubject.asObservable();\n  }\n\n  getPostById(id: number): Observable<Post | undefined> {\n    const post = this.posts.find(p => p.id === id);\n    if (post) {\n      post.views = (post.views || 0) + 1; // Increment views\n      this.postsSubject.next([...this.posts]);\n    }\n    return of(post);\n  }\n\n  addPost(post: Post): void {\n    const newId = Math.max(...this.posts.map(p => p.id), 0) + 1;\n    const newPost: Post = {\n      ...post,\n      id: newId,\n      comments: [],\n      createdAt: new Date().toISOString(),\n      likes: 0,\n      isLiked: false,\n      isFavorite: false,\n      views: 0 // Initialize views\n    };\n    this.posts.push(newPost);\n    this.postsSubject.next([...this.posts]);\n    // Emit notification\n    this.notificationService.addNotification(`Nouveau post publié : ${newPost.title}`, newPost.id);\n  }\n\n  updatePost(id: number, updatedPost: Post): void {\n    const index = this.posts.findIndex(p => p.id === id);\n    if (index !== -1) {\n      this.posts[index] = { ...this.posts[index], ...updatedPost };\n      this.postsSubject.next([...this.posts]);\n      this.favoritesSubject.next(this.getFavoritesSync());\n    }\n  }\n\n  deletePost(id: number): void {\n    this.posts = this.posts.filter(p => p.id !== id);\n    this.postsSubject.next([...this.posts]);\n    this.favoritesSubject.next(this.getFavoritesSync());\n  }\n\n  toggleLike(postId: number): void {\n    const post = this.posts.find(p => p.id === postId);\n    if (post) {\n      post.isLiked = !post.isLiked;\n      post.likes = post.isLiked ? post.likes + 1 : post.likes - 1;\n      this.postsSubject.next([...this.posts]);\n      this.favoritesSubject.next(this.getFavoritesSync());\n    }\n  }\n\n  toggleFavorite(postId: number): void {\n    const post = this.posts.find(p => p.id === postId);\n    if (post) {\n      post.isFavorite = !post.isFavorite;\n      this.postsSubject.next([...this.posts]);\n      this.favoritesSubject.next(this.getFavoritesSync());\n    }\n  }\n\n  getFavorites(): Observable<Post[]> {\n    return this.favoritesSubject.asObservable();\n  }\n\n  private getFavoritesSync(): Post[] {\n    return this.posts.filter(p => p.isFavorite);\n  }\n\n  get favoritesCount$(): Observable<number> {\n    return this.getFavorites().pipe(\n      map(favorites => favorites.length)\n    );\n  }\n\n  setSearchQuery(query: string): void {\n    const filteredPosts = this.posts.filter(post =>\n      post.title.toLowerCase().includes(query.toLowerCase()) ||\n      post.content.toLowerCase().includes(query.toLowerCase())\n    );\n    this.postsSubject.next(filteredPosts);\n  }\n\n  addComment(postId: number, comment: BlogComment): void {\n    const post = this.posts.find(p => p.id === postId);\n    if (post) {\n      const newComment: BlogComment = {\n        ...comment,\n        id: post.comments.length + 1,\n        createdAt: new Date().toISOString()\n      };\n      post.comments.push(newComment);\n      this.postsSubject.next([...this.posts]);\n    }\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}